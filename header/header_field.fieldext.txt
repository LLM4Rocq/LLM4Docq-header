
Finite-Dimensional Field Extensions in Coq

Overview
========
This module develops a comprehensive formalization of finite-dimensional extensions of fields, as well as their subfield and scalar extension structures, using Coq and the Mathematical Components (MathComp) library. Its primary goal is to provide flexible interfaces and constructions for reasoning about field extensions, subfields, and related algebraic operations, all within the robust type-class system built atop MathComp’s algebraic hierarchy.

Mathematical Scope
==================
The file focuses on the algebraic theory of finite-dimensional (a.k.a. algebraic and finite) extensions of fields, suitable for applications in Galois theory, splitting fields, algebraic number theory, and linear algebra. Specifically, it covers:

- The definition of finite extensions of a base field \( F \) (called “field extensions of finite dimension”).
- The structure and manipulation of subfields and their relationships to subalgebras and subspaces.
- Construction of field extensions by adjoining roots of polynomials (`subFExtend`) and reasoning about minimal polynomials.
- Scalar restriction and extension, enabling reinterpretation of a given field as an extension over different subfields.
- Interactions between subfields (via intersection and product), morphisms between fields, and algebraic operations on vector spaces over these fields.

Mathematical Structures and Their Representations
================================================
Here are the principal mathematical objects manipulated in the file, along with how they are encoded in Coq:

**1. Field Extensions**:  
- *Type*: `fieldExtType F`  
- *Description*: Represents fields \( L \) carrying both a field structure and a compatible algebra structure over a base field \( F \). Internally, this is realized as a structure combining the MathComp `fieldType` and its `falgType` (finite-dimensional algebra) over \( F \).

**2. Subfields and Subalgebras**:  
- *Type*: `{subfield L}`  
- *Description*: Subfields of \( L \) containing the image of \( F \) and closed under field operations. In the finite-dimensional context, these coincide with F-subalgebras, and are implemented as an instance of aspace (`{aspace L}`), i.e., certain vector subspaces of \( L \) with algebraic closure properties.

**3. Operations on Subfields**:  
- *Intersection*: `(E :&: F)%AS` — Cap of two subfields (their intersection).
- *Product*: `(E * F)%AS` — Smallest subfield containing the union of \( E \) and \( F \).
- *Image under Morphism*: `(f @: E)` — The image of a subfield under an algebra morphism.

**4. Generating Field Extensions by Adjoining an Element**:  
- *Type*: `subFExtend iota z p`  
- *Description*: The field extension generated over \( F \) (embedded via `iota` into \( L \)) by adjoining a root \( z \) of a polynomial \( p \in F[x] \). This is modeled via an explicit quotient construction, equipping formal polynomials mod \( p \) with induced operations.

- *Evaluation and Morphisms*:  
  - `subfx_inj`: The embedding of the constructed field extension into \( L \).
  - `inj_subfx`: The embedding of \( F \) (via its image under \( iota \)) into the constructed extension.
  - `subfx_eval`: Evaluates polynomials at the distinguished root in the constructed extension.
  - `subfx_root`: The generator (“adjoined root”) element.

**5. Minimal Polynomial and Adjoining Degree**:  
- *Function*: `minPoly K x` — The unique monic minimal polynomial of \( x \) over \( K \) (a subfield).
- *Function*: `adjoin_degree K x` — The degree of the extension \( K(x)/K \); that is, the degree of the minimal polynomial.
- *Function*: `Fadjoin_poly K x y` — Returns a polynomial over \( K \) such that \( y = p(x) \) in \( L \).

**6. Scalar Extension and Restriction**:  
- *Type*: `fieldOver F` — The type \( L \), reinterpreted as an extension over the subfield \( F \), giving methods to treat submodules as vector spaces over \( F \).
- *Type*: `baseFieldType L` — \( L \), reinterpreted as an extension over a “smaller” base field \( F_0 \).

**7. Vector Spaces and Subspaces**:  
- `{vspace L}`: Vector subspaces of \( L \) over a base field.
- `{subfield L}`: Subfields/subalgebras as specialized subspaces.

**8. Canonical Structures and Morphisms**:  
- The file imports, extends, and constructs various canonical (instance) definitions so that field extensions, module structures, and morphisms become available for use with Coq’s type-class algorithms and for seamless reasoning with the MathComp hierarchy.

Key Coding and Notational Conventions
=====================================
- **Locality and Scopes**:  
  *All field, ring, and algebra operations are placed within global or local scopes (e.g., `%AS` for aspace/subfield operations, `ring_scope` for ring notation). The user should always open the appropriate scope.*  

- **Predicates and Inclusion Relations**:  
  *Inclusion and membership are denoted as `x \in K` and subspace/subfield relations as `(K <= E)%VS`, where `%VS` is the vector subspace order.*

- **Canonical Packing and HB Classes**:  
  *Use of the Hierarchy Builder (HB) mechanism to define and export algebraic type classes, notably the `FieldExt` interface and associated HB classes for morphisms, modules, and algebras.  
  *Canonical structures are explicitly packaged and exported to allow “canonical inference” (automatic typeclass resolution by Coq) across the hierarchy, so that operations like coercions, products, and images are algebraically well-behaved.*

- **Refinement Types for Subspaces and Subfields**:  
  *Instead of working with arbitrary subsets, the development uses dependent record types (e.g., `{subfield L}`) representing the set of subfields that are “detachable,” i.e., whose membership is described by explicitly defined predicates and structures, allowing efficient manipulation and proof automation.*

- **Product and Intersection Notation**:  
  *The product and intersection of subfields use infix notation: `E * F` and `E :&: F`, facilitating readability.*

- **Explicit Lifting and Morphism Constructors**:  
  *For quotient and construction types (e.g., field extensions by polynomial roots), operations like addition, multiplication, inverses, and evaluation are systematically defined using “lifting” operations from representatives, and their algebraic properties are established via canonical instances and custom lemmas.*

- **Scalar Ring and Module Structures**:  
  *To handle situations where the scalar field changes (e.g., viewing a field as an extension of a subfield), “fieldOver” and “baseFieldType” functions are provided along with their induced algebraic structures (Lmodule, Lalgebra, etc.), including explicit scaling operations (`*F:` and `*F0:`) with supporting lemmas to control normalization and simplification when rewriting.*

- **Reflection and Specification Lemmas**:  
  *Numerous “reflect” predicates (e.g., `FadjoinP`, `minPoly_XsubC`) provide a separation between the computational Boolean and propositional levels, connecting Coq’s reasoning with traditional algebraic statements.*

- **Explicit Section Parameters**:  
  *Sections always declare all relevant types and variables, making dependencies and generality explicit so that results are as general and reusable as possible.*

- **Dimension Calculation and Direct Sum Decomposition**:  
  *The dimension of vector spaces and field extensions is carefully tracked, with supporting lemmas allowing one to relate structure theorems (e.g., the dimension of \( K(x) \) over \( K \)) to the degree of the defining polynomial.*

Summary of Purpose
==================
The main objective of this file is to provide a robust and extensible infrastructure for formalized reasoning about finite field extensions, their subfields, and associated algebraic constructions within the Coq proof assistant, exploiting and extending the MathComp framework. All key algebraic objects—field extensions, subfields, polynomial-generated extensions, scalar change operations, and related morphisms—are formally codified, allowing for automated and reliable proofs of their properties, as well as for further developments (e.g., Galois theory, class field theory) on top of this foundation.

This context and these conventions are intended to orient readers and tool users so that any code or proof chunk in the file can be interpreted or commented meaningfully, with full awareness of the algebraic structures and the formalization strategy adopted in this module.
