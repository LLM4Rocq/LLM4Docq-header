
Finitely iterated operators (Big Operators) in Coq

Overview
========
This file provides a comprehensive formalization of *finitely iterated operators* (big operators, or "bigops") within the Coq proof assistant, establishing both their generic definition and a robust supporting theory for their usage across various mathematical domains. The development closely follows, but does not require prior knowledge of, the "Mathematical Components" (MathComp) library’s style and concepts.

Big operators generalize familiar mathematical notations such as summation (∑), product (∏), maximum (max), and allow the iteration of an arbitrary binary operator over a finite set of terms indexed in a variety of ways. This file’s formalization enables expressing, reasoning about, and manipulating such iterated computations with powerful notation and an extensive library of lemmas.

Purpose and Goals
=================
- To provide a highly generic and modular framework for expressing and manipulating finitely iterated operations (bigops) in mathematics and formal proofs.
- To define these operators abstractly, parameterized by the type of result, index type, underlying operator, the initial/identity value, range or domain of iteration, selection/filtering predicates, and iterated term.
- To endow big operators with powerful notations that mimic mathematical practice and support a wide variety of use cases—from sums, products, and maxima over sequences and finite types, to more general combinatorial constructs.
- To supply a rich set of algebraic interfaces (for associativity, commutativity, identities, distributivity, etc.) and prove foundational lemmas and induction principles, supporting both elementary and advanced algebraic reasoning over bigops.
- To ensure efficiency and correctness in proof automation (via opaque definitions and rewriter hints), and to provide infrastructure for further developments in algebra, combinatorics, and beyond.

Mathematical Objects and Abstract Structures
===========================================

### 1. Big Operator (bigop)

**Definition**: A family of iterated (folded) applications of a binary operator over a finite collection of indices `I`, with:
- Result type `R`
- Indexing type `I` (e.g., nat, a finite set, ordinals)
- Operator `op : R -> R -> R`
- Neutral/identity element `idx : R`
- Range or list of indices `r : seq I` (or, implicitly, all of a finite type)
- Filtering predicate `P : I -> bool` (to select relevant indices)
- Iterated function/term `F : I -> R`

**Representation**:
- The core definition is `bigop`, a (locked by default) fold/reduction that iterates over a sequence, applying `op` to the values `F i` where `i` belongs to `r` and satisfies `P`.
- The `bigbody` wrapper is used to ensure the Coq pretty-printer can reconstruct the intended bigop notation and to enable type-directed insertion of coercions.

### 2. Algebraic Interfaces (Classes for Operators)

**Key algebraic properties are abstracted via interfaces**, allowing the formulation and proof of generic lemmas depending only on, e.g., associativity or the presence of an identity element:
- **SemiGroup.law**: For associative binary operators
- **SemiGroup.com_law**: For associative and commutative binary operators
- **Monoid.law**: For SemiGroups with a two-sided identity (neutral element)
- **Monoid.com_law**: For commutative Monoids
- **Monoid.mul_law**: For operators with an absorbing (annihilating) element
- **Monoid.add_law**: For pairs of binary operators where one distributes over the other (semiring/semimodule structure)

These interfaces are implemented using the HB (Hierarchy Builder) infrastructure, which modularly composes properties into canonical Coq structures.

### 3. Notation and Patterns

A rich suite of **notations** emulates standard mathematical expressions for sums, products, maxima, unions, and intersections, parameterized over ranges and filters:

- General:  
  `\big[op/idx]_range expr`
- Sum:  
  `\sum_(...) ...`
- Product:  
  `\prod_(...) ...`
- Maximum:  
  `\max_(...) ...`
- Union/Intersection:  
  `\bigcup_(...) ...`, `\bigcap_(...) ...` (for sets, etc.)

**Ranges** flexibly specify the index set (sequence, interval, finite type, subset, etc.), and may be further refined by filter predicates.

**Pattern abbreviations** (`BIG_F`, `BIG_P`) are provided to facilitate generic rewriting.

### 4. Instantiated and Pervasive Monoids

For practical use, common operators—such as boolean AND/OR/XOR, natural number addition/multiplication/maximum/gcd/lcm, list concatenation—are **pre-declared with canonical monoid structures**.

### 5. Induction and Extensionality Principles

The file provides **induction and recursion principles** suitable for reasoning about big operators, including specialized forms for jointly inducting over two or three parallel bigops.

### 6. Enumerations and Indexing

Enumerations of finite types, ordinals, and indexed sequences are formalized to underlie the finite iteration; utility functions and lemmas are provided for working with these enumerations.

### 7. Support for Algebraic Simplification and Distributivity

A large collection of lemmas covers:
- Equational properties (commutation, reindexing, recombination, distributivity, etc.)
- Specialization to various index types (nats, ordinals, tuples, etc.)
- Splitting, narrowing, combining ranges and conditions
- Properties under algebraic structures (monoid, commutative monoid, semiring)
- Boolean bigops (relation to standard predicates like all, exists, has)
- Fine-grained support for term and index extensionality

Key Coding and Notational Conventions
=====================================

1. **Locked Definitions**:  
   - The main iterated operator (`bigop`) is *locked* (opaque) to improve type-checking performance and to protect against unwanted unfolding in proofs.
   - An "unlock" mechanism is provided when internal computation is required.

2. **Scope and Notation Control**:
   - Dedicated scopes (e.g., `big_scope`, `nat_scope`) ensure that bigop notation and operators are parsed and displayed as intended, avoiding conflicts and maintaining readability.
   - Overloading of notations allows, for example, `\sum` to refer to addition over naturals, addition in a ring, or other instantiations as appropriate.

3. **Functorial and Modular Design**:
   - The use of HB (Hierarchy Builder) structures abstracts algebraic properties, allowing for highly generic theorems that instantiate automatically when concrete operators (like `+`, `*`, `max`) are used.
   - Lemmas typically have minimal requirements—only the algebraic properties needed—enabling maximal reuse.

4. **Operator Overloading and Type Classes**:
   - Canonical instances associate standard operators (`addn`, `muln`, `andb`, etc.) with their corresponding algebraic structures.
   - Type class resolution and canonical projections are employed for seamless automation.

5. **Range and Filtering Syntax**:
   - Ranges can specify indices from sequences, intervals, ordinals, or subsets of finite types, with optional on-the-fly filters.
   - Filtering predicates are always boolean, to fit into Coq’s choice of computationally effective rewriting.

6. **Extensionality and Reindexing Lemmas**:
   - Proofs often reduce iterative properties to the underlying list or type, with abundant support for converting between different representations of the index set.
   - Reindexing and permutation lemmas abstract over the specific collection being iterated.

7. **Proof Automation Support**:
   - Hints, patterns, and notation (like `BIG_F`, `BIG_P`) are included to support powerful rewriting and reasoning tactics.

Context for Retrieval and Code Interpretation
============================================

To interpret or comment on specific chunks of this file, recall:

- **The file's central object is the abstract "big operator," defined and reasoned about with respect to a binary operator with required properties (associativity, commutativity, identity) as needed.**
- **All notations of the form `\big[op/idx]_range expr` expand to iterated folding/reduction over a finite collection, with flexible control over index type, range, and filtering.**
- **Lemmas are organized according to the minimal algebraic requirements needed for their conclusion—e.g., general lemmas, lemmas for associative operators, lemmas for (commutative) monoids, etc.—and are designed for both elementwise and structure-level rewriting.**
- **The file's approach is modular: users wishing to instantiate new big operations, or prove new lemmas, can do so by declaring appropriate canonical structures and using the existing framework.**
- **Mathematical conventions are closely mirrored in Coq's syntax by carefully designed notations and reserved constructs, ensuring code is as close as possible to “mathematical textbook” style while admitting effective formal manipulation.**

This infrastructure underpins much of the formal development of algebra, combinatorics, and discrete mathematics in Coq, and is foundational to many further modules that rely on iterated computation and the associated algebraic properties.
