
(*

File Purpose and Scope
======================
This Coq source file provides the foundational formalization of finite group representation theory in the setting of the Mathematical Components (MathComp) library. Its primary goal is to bridge classic finite group theory with (linear) representation theory and the basics of commutative algebra, rigorously developing the general theory of group representations over fields and rings via matrices. The file delivers a comprehensive suite of definitions, structures, and theorems covering major topics such as irreducible and semisimple representations, enveloping algebras, composition series (Jordan–Hölder theorem), Maschke’s theorem, Schur’s lemma, Clifford theory, module and homomorphism structure, Wedderburn decomposition, and the construction of suitable splitting fields for representations, among many others.

Rather than working with general abstract modules, the formalization specializes to modules realized as spaces of row matrices over a ring or field, typically within `n × n`-matrix algebras. This concrete approach leverages MathComp’s robust matrix and algebraic infrastructure for effective automation.

Mathematical Structures and Concepts
====================================

**Groups and Sets**
- *Finite Groups*: Finite groups are represented by the type `{group gT}`, where `gT` is a finite group type (`finGroupType`) in MathComp.
- *Subgroups and Cosets*: Subgroups are subsets of `{group gT}`, and quotient groups, cosets, normalizers, centers, and derived subgroups are formalized via corresponding MathComp constructs.

**Rings, Fields, and Matrices**
- *Rings/Fields*: The file is parametric in a ring or field type, typically denoted `R` or `F`, often requiring additional structure (unit ring, commutative, field, or decidable field).
- *Matrices*: The type `'M[R]_n` denotes the set of `n × n` matrices over `R`. Row and column spaces, kernel, rank, and other linear-algebraic notions are defined in these terms.

**Representations**
- *Matrix Representations*: A group representation is a morphism from a finite group `G` to the group of invertible `n × n` matrices over a ring or field. The key structure is `mx_representation R G n`, a record encapsulating a function `r : gT -> 'M[R]_n` satisfying the homomorphism property on the specified subgroup `G`. The type class coercions and canonical structures allow functions and matrix representations to be interchanged smoothly.
- *Morphisms and Variants*: Induced, restricted, quotient, conjugate, and mapped representations are provided via systematic constructions, preserving structure and allowing transition between groups and fields.

**Modules and Submodules**
- Representations act on row vector spaces, and modules and submodules are realized as the row spaces of matrices, e.g., the set of vectors stabilized by a subgroup or an endomorphism is described in terms of the row space of a matrix.
- *Submodules, kernels, and centralizers* are realized by appropriate subsets and matrix equations (e.g., the kernel as elements fixing a subspace, centralizers as matrices commuting with a representation).

**Enveloping Algebra**
- The enveloping algebra of a representation is modeled as the subalgebra of `n × n` matrices generated by the images of group elements; it is encoded as the row space of an appropriate matrix.

**Irreducibility and Simplicity**
- *Irreducible representations*: Defined via simplicity of the module corresponding to the full row space.
- *Absolutely irreducible representations*: Those whose enveloping algebra is the full matrix algebra, corresponding to absence of reduction even after field extensions.
- *Simple modules*: A matrix module is simple if it has no nontrivial submodules. Both classical and constructive (decidable) tests are provided.
- *Semisimple modules*: Direct sums of simple modules, supporting both classical and constructive characterizations.

**Homomorphisms, Isomorphisms, and Similarity**
- Matrices inducing module homomorphisms are characterized via centralizer conditions.
- *Module isomorphism* (`mx_iso`): Defined over the data of invertible matrices mapping one module onto another.
- *Similarity of representations* (`mx_rsim`): Two representations are similar if conjugation by an invertible matrix relates them.

**Composition Series and Jordan–Hölder Theorem**
- Formalizes composition and subseries of modules, and encodes the notion of maximal submodules. The Jordan–Hölder theorem is proved in this matrix module context, including uniqueness (up to order and isomorphism) of composition factors.

**Theorems in Representation Theory**
- *Maschke’s theorem*: Sufficient conditions for semisimplicity, especially when field characteristic is coprime to group order.
- *Schur’s lemma*: Statements about the endomorphism structure of simple modules and irreducible representations.
- *Clifford’s theorem*: Decomposition of modules and description of the action of larger groups on submodule composition factors.
- *Wedderburn’s structure theorem*: Decomposition of the group ring and regular representation into simple components and subrings.
- *Jacobson density theorem*: Central at the interface between module theory and endomorphism rings.

**Splitting Fields and Field Extensions**
- Provides constructions to extend the field of coefficients in order to realize splitting fields: fields over which all irreducible representations are absolutely irreducible.
- *MatrixGenField* submodule encapsulates the explicit construction of field extensions generated by centralizing elements, including defining and operating with the extension field, transferring representations, and verifying reducibility in the extended field.

**Regular Representations and Group Rings**
- The group ring of `G` over `F` and the regular representation are concretely encoded using matrices indexed by group elements, with all associated algebraic structure (ideals, subrings, etc).

**Socle and Irreducible Components**
- The *socle* (direct sum of all simple submodules) is fully developed, including its explicit construction, properties, and component structure, along with enumeration types for irreducible components.

**Decision Procedures**
- For representations over decidable fields, decision procedures for properties such as simplicity, irreducibility, and semisimplicity are provided via quantifier elimination on formulas representing matrix equations (using the `MatrixFormula` toolkit).

Key Notational and Coding Conventions
======================================

1. **Parameterization and Type Classes**: Almost all major concepts (groups, rings, fields, representations) are parameterized. MathComp’s canonical structures and type class mechanisms ensure smooth use of overloaded notation and automatic inference of structure.

2. **Matrix-Based Modules**: Submodules are represented by row spaces of matrices (`'M_(m, n)`) rather than by abstract sets, making submodule relations and direct sum decompositions concrete and computable.

3. **Set Notation and Explicit Scopes**: MathComp scopes (notably `group_scope`, `irrType_scope`, and `group_ring_scope`) are used to interpret notation such as `G`, `1%:M`, `rstab`, `rcenter`, `'n_i` (degree of a representation), `'R_i` (Wedderburn component), and `'e_i` (Wedderburn idempotent).

4. **Canonical Functions and Coercions**: Functions like `mx_representation`, `socleType`, and related components can typically be coerced to functions or matrices, supporting idiomatic usage in construction, proof, and statement.

5. **Boolean/Propositional Reﬂection**: Key predicates (for example, expressing module properties, homomorphism/centralizer conditions) provide both propositional and Boolean forms, along with reflection lemmas, making the file compatible with MathComp’s small-scale reflection principle.

6. **Direct Sums and Indexing**: The use of bigops (`\sum_(...)`) and explicit indexed families allows effective definitions of sums and direct sums of submodules, scalar multiplication, and linear map operations.

7. **Sectioning and Local Notation**: The file is divided into logical sections, each introducing its own local notation and variables, improving modularity and clarity. Specialized constructions (such as submodules, factor modules, or change of field) are isolated into distinct sections or submodules.

8. **Decidability and Extracted Data**: Prop-level predicates (like isomorphism or simplicity) are supplemented with Boolean, computable counterparts in cases where the algorithms are constructive.

9. **Constructions for Derived/Quotient/Conjugate Representations**: The file provides uniformly named structures (like `subg_repr`, `quo_repr`, etc.) for extending, restricting, or translating representations across group homomorphisms, subgroups, and field extensions.

10. **Exports and Compatibility**: Deprecated notations are provided as aliases for backward compatibility, and appropriate MathComp export idioms are used to make core definitions accessible.

Interpretation Context for Code Chunks
======================================
This file is designed as a unifying foundation for formalization and proof in finite group representation theory within the MathComp ecosystem. Every major construction is reflected both in mathematics and in implementational details: modules as rowspaces, homomorphisms as matrix equations, representations as parameterized structures with function coercions. Definitions and lemmas are systematically named and grouped to reflect the underlying mathematical object or operation.

When reading or commenting a code chunk from this file, begin by considering:
- The ambient parameters (`R`/`F`, `G`, matrix size) and current scope.
- Whether elements are being viewed at the “representation” level (functions from the group) or at the “module” level (rowspaces of matrices).
- The role of the operation: subgroup construction, module property, homomorphism, similarity, and so on, as described in the above categories.

Special care should be taken to relate Boolean-valued predicates and computational definitions to their mathematical meaning, especially where computability and constructive content are critical (as in decidable simplicity or reducibility).

*Summary*: This file serves as the backbone for describing and reasoning about group representations over fields and rings in a matrix-based, computation-friendly way, encoding the structural theorems of representation theory with precise, reusable, and inter-operable formalizations.

*)
