
Algebraic Number Theory Foundations for Character Theory

Overview
========
This file develops foundational results and constructions from algebraic number theory, with a particular focus on properties of the field of complex algebraic numbers (`algC`). These results are motivated by, and designed for, use in the formal character theory library, but are stated in such a way as to be maximally reusable and extensible. The contents cover the algebraic structure of number fields, the notions of rational (`Q`) and integral (`Z`) linear spans in `algC`, the definition and basic properties of algebraic integers, specialized divisibility and congruence for algebraic integers, and the construction and manipulation of automorphisms and subrings related to these structures.

Mathematical Objects and Their Representation
=============================================

1. **Number Fields**
   - Number fields are modeled abstractly as types of the form `extFieldType rat`: finite extensions of the field of rational numbers, embedded inside the field of complex algebraic numbers (`algC`).
   - The file provides lemmas on (constructive) existence and canonical embeddings of number fields generated by specified subsets of `algC`.

2. **Rational and Integral Spans**
   - *Q-span (`Crat_span`)*: The set of elements in `algC` that can be expressed as Q-linear combinations (with rational coefficients) of a finite sequence `X : seq algC`. Membership is given by the existential predicate: there exists a function `a : rat^(size X)` such that `x = Σ_i QtoC (a i) * X_i`.
   - *Z-span (`Cint_span`)*: Similar to `Crat_span`, but using integer coefficients. Implemented via predicates over tuples and membership in vector subspaces.

3. **Algebraic Integers**
   - An element `x : algC` is an algebraic integer (the set called `Aint`) if its minimal (monic) polynomial over Q has integer coefficients.
   - Provides constructors and inheritance for `0`, `1`, integers, natural numbers, and roots of unity, confirming their membership in `Aint`.
   - Key closure properties (e.g., under sums, products, and automorphisms) are formalized.

4. **Divisibility and Congruence in Algebraic Integers**
   - *Ideal-generated divisibility (`dvdA`)*: Defines when an element `e` divides another, with respect to the ideal of algebraic integers generated by `e`. The predicate is: if `e ≠ 0`, then `e` divides `z` if `z / e` is an algebraic integer.
   - Specialized notations (`%A`, `%Ax`) are provided for divisibility and modular equality (`x == y %[mod e]`): these express congruence modulo the principal ideal generated by `e`. These notations are designed to mimic standard mathematical notation for congruences, while supporting the underlying rigorous Coq definitions.

5. **Automorphisms and Embeddings**
   - Constructs field automorphisms of extensions of Q, and their extensions to `algC`. Provides tools for restricting automorphisms to subfields, extending automorphisms from subfields, and characterizing automorphisms related to roots of unity.
   - Includes the explicit construction and properties of automorphisms acting on specific primitive roots of unity.

6. **Multiplicative Order**
   - The function `orderC x` computes the smallest positive integer `n` such that `x^n = 1`, where possible, for a given element `x : algC`, returning `0` if `x` is not a root of unity.
   - Provides a "bracket" notation (`#[x]%C`) for multiplicative order and lemmas interrelating exponentials and divisibility in this context.

Key Notational and Coding Conventions
=====================================

1. **Naming and Scopes**
   - Specialized notations and coercions are managed via dedicated scopes:
     * `algC_scope` and `algC_expanded_scope` for algebraic integer divisibility and congruence.
     * The `C_scope` for the notation of multiplicative order.
   - Elements of type `nat` and `int` can be coerced into `algC`, with notations `ZtoC` and `QtoC` referring to these coercions.

2. **Maps and Monomorphisms**
   - Notations such as `intrp`, `pQtoC`, and others indicate the application of various coercions or morphisms (homomorphisms, injections) over polynomials or ring elements.
   - Rooted in the MathComp paradigm, function arguments of type `{rmorphism _ -> _}` stand for structure-preserving ring homomorphisms.

3. **Predicates and Reflection**
   - Predicates such as `Crat_span` and `Cint_span` yield Boolean membership and are paired with reflection lemmas, supporting both Boolean and propositional styles for proof automation.
   - Decidability facts are often provided via `decidable` or similar markers.

4. **Z-module and Subring Closure**
   - Z-span and corresponding divisibility predicates are proven to be Z-module-closed and, for integers, subring-closed, allowing these sets to be manipulated with the standard machinery of additive group and ring structures.

5. **Use of Tuples and Sequences**
   - Where finite spans or linear combinations are needed, MathComp tuples (`n.-tuple T`) and sequences are employed, bridging between finite set representation and computational tools.

6. **Modular Arithmetic Notations**
   - The congruence notation `(a == b %[mod e])%A` is supported, together with its negation, and with compatibility lemmas that allow rewriting using addition, multiplication, and other ring operations, much as in standard number theory.

Organization and Purpose in the Ecosystem
=========================================
This file serves as an algebraic backbone for formal developments in character theory and further algebraic number theory in the MathComp ecosystem. It encapsulates the key foundational properties of algebraic integers and number fields as they manifest in the field of complex algebraic numbers, and establishes a formal, reusable framework for divisibility, congruence, and automorphism constructions.

The conventions, notations, and definitions are shaped by MathComp standards but are explained and isolated so that others—even users unfamiliar with MathComp internals—can follow and extend the constructions. 

By carefully distinguishing between Q-linearity, Z-linearity, and the unique features of algebraic integer arithmetic, the file provides infrastructure for both internal theory developments (lemmas, subring structures, automorphism "lifts" and "descents") and for rigorous formalization of classical results from algebraic number theory, such as the structure of the ring of integers in a number field, the behavior of automorphisms over cyclotomic fields, and the structure of algebraic integer ideals.

Hence, any code chunk from this file is to be interpreted with the understanding that:
- All algebraic structures are implemented inside `algC`, using explicit spans and Boolean predicates.
- Divisibility and congruence pertain to ideals of algebraic integers rather than the full field, and care is taken to handle zero-divisors appropriately.
- Modular and linear algebraic operations are reflected to Boolean predicates accompanied by `reflect` lemmas, facilitating both constructive and classical reasoning styles.
- Interplay with automorphisms and subfields is sculpted to allow manipulations at the level of both the abstract number field and its concrete representation inside `algC`.

This context enables precise interpretation, commenting, or extension of any function, lemma, or notation provided in the file.
