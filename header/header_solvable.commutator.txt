
Commutators and Derived Series of Finite Groups

Overview
========
This file is a mathematical formalization, within the Coq proof assistant, of fundamental properties of commutators in finite group theory. Its principal goals are to define and develop the algebra of commutators—both for elements and for subgroups—prove key structural results concerning them (including the Hall–Witt identity and the Three Subgroup Lemma), and to introduce and study the derived (also called commutator) series of a group. These concepts lay the groundwork for subsequent formalization of solvable and nilpotent groups. The file is intended as a core building block for higher-level algebraic developments in group theory and is written using the tools and conventions of the Mathematical Components (MathComp) library.

Mathematical Structures and Concepts
====================================

**1. Finite Groups and Their Elements:**  
The file’s main objects of study are *finite groups*, represented by the type `{group gT}` where `gT` is a finite group type (`finGroupType`). Group elements belong to the type `gT`, and their subsets (not necessarily subgroups) are denoted as `{set gT}`.

**2. Commutators and Commutator Subgroups:**  
- *Elementwise commutator*: For elements `x, y : gT`, the commutator `[~ x, y]` equals `x^-1 * y^-1 * x * y`.  
- *Higher commutators*: Iterated commutators such as `[~ x, y, z]` denote nested commutators, e.g., `[[~ x, y], z]`.
- *Setwise commutator*: For subsets `A, B : {set gT}`, the commutator `[~: A, B]` is the subgroup generated by all `[~ a, b]` with `a ∈ A, b ∈ B`. Triple commutators `[~: A, B, C]` are defined analogously.

**3. Derived and Derived Series:**  
- The *n-th derived subgroup* (also called the *commutator subgroup series* or *derived series*) is defined recursively as:
  - `G^(0)` := `G` (the group itself)
  - `G^(n+1)` := `[~: G^(n), G^(n)]` (the commutator subgroup of the previous term).
  - These are denoted as `G^(n)` or `G^`(n)` in the code using the `derived_at n G` function. This series is fundamental for understanding group solvability.

**4. Normality, Abelianity, and Centrality:**  
- The file frequently expresses and manipulates predicates like `H <| G` (meaning subgroup `H` is normal in `G`), `abelian G` (G is abelian), and `'C(A)` (the centralizer of a set `A`).

**5. Group Morphisms and Isomorphisms:**  
- Homomorphisms between groups (`{morphism D >-> rT}`) and properties relating commutators and derived subgroups under morphic images and isomorphisms are established.

Key Results and Lemmas
======================
The file includes the formal statement and proof of several central results regarding commutators and derived subgroups, among them:

- *Commutator identities*: Algebraic properties governing how commutators behave with respect to group operations and conjugation.
- *Hall–Witt identity*: A deep three-variable commutator identity essential in the theory of nilpotent and solvable groups.
- *Three Subgroup Lemma*: A pivotal result for triple commutators.
- *Derived subgroup properties*: Characterizations of abelianity and normality in terms of derived subgroups; e.g., `G` is abelian iff `G^(1) = 1` or equivalently `[~: G, G] = 1`.
- *Morphisms and commutators*: The interplay between taking commutators and forming quotient groups or morphic images, ensuring coherence with the usual group-theoretic operations.
- *Canonical instances*: For compatibility with MathComp’s functor and group theory infrastructure, the file provides canonical structures and proofs for the continuity and functoriality of the derived subgroup operator.

Notational and Coding Conventions
=================================

- **Implicit Arguments and Type Inference:**  
  The file uses `Set Implicit Arguments` to minimize notational overhead; many types, especially group types, are inferred.

- **Naming Conventions:**  
  - `[~ x, y]` for elementwise commutators.
  - `[~: A, B]` for subgroup commutators.
  - `G^(n)` or `G^`(n)` for the n-th derived group.
  - Standard abbreviations: `Cx` for centralizer, `Nx` for normalizer, etc.

- **Scoping and Notation:**  
  - Notations `^`, `[~ ...]`, `<|`, etc., are used in group_scope and Group_scope for clarity and to match mathematical conventions.
  - Explicit sectioning is used to separate properties involving left, right, or both commutativity assumptions for iterated commutators.

- **Sectioning and Local Hypotheses:**  
  The file is organized into sections that focus on:
    - Elementwise commutator properties,
    - Set-theoretic commutators,
    - The derived series and its properties,
    - Properties under specialized hypotheses such as commutativity or normality relations.

- **Boolean Reflection:**  
  Many results utilize MathComp’s reflection paradigm, translating between propositional properties and Boolean predicates (e.g., using `reflect` to bridge the gap between `G abelian` and `G^(1) = 1`).

- **Canonical Structures and Functors:**  
  The derived subgroup and related operations are registered as instances of MathComp’s functor classes (`GFunctor`, etc.), supporting uniform manipulation in later developments.

Role and Context for Retrieval
==============================
This file provides a foundational base for working with commutators and derived subgroups within the formalization of finite group theory. It introduces definitions and proves results that are routinely required in the study of group solvability, nilpotence, and structural theorems in algebra.

To interpret or document subcomponents of this code, understand that all reasoning is under the umbrella of standard finite group theory, using precise encodings for sets, group operations, and morphisms as provided by MathComp. Mathematical results are stated both in logical (propositional) and set-theoretic (subset, normality) forms. Boolean predicates and algebraic structures are tightly coupled, and much of the file’s utility derives from its systematic establishment of core commutator machinery.

This docstring thus equips the reader with the high-level context, definitions, and conventions necessary to understand, comment on, or extend the proofs and definitions pertaining to commutators and derived subgroups in this file, without needing prior familiarity with the file’s specific implementation or the deeper structure of MathComp.
