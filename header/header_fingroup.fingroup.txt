
Finite Groups

Overview
========
This file provides a comprehensive, foundational formalization of finite group theory for use with the Coq proof assistant, specifically within the Mathematical Components (MathComp) library ecosystem. The main goal is to define the abstractions, interfaces, and notations required to work efficiently with finite groups and their subgroups, based on their representation as types with an explicitly given group law, and to support pointwise group operations on subsets and subgroups. The file is central to MathComp's algebraic hierarchy, laying the groundwork for further developments in group theory, including cosets, conjugation, commutators, normalizers, centers, group actions, and Lagrange-type results.

Purpose and Main Objectives
===========================
- To define the main class structure for finite groups, including both the "base group" structure (monoid with involutive antimorphism) and the full group structure (satisfying the existence of both-sided inverses).
- To introduce a flexible and robust notation and interface for working with group elements, sets of group elements, subgroups, cosets, conjugacy classes, commutators, products, and quotients, all in the context of finite types.
- To provide a wide range of underlying lemmas and constructions that allow for the development of finitary group-theoretic results effectively, leveraging canonical structures and type inference in Coq.
- To support the systematic lifting of group-theoretic operations from elements to subsets and subgroups and to provide ambient mechanisms for automated reasoning and rewriting.

Mathematical Structures and Their Representations
=================================================
1. **Finite Groups (finGroupType)**
   - The primary structure for finite groups, described by `finGroupType`, which bundles a carrier type (`gT`), a multiplication operation, an identity element, and an inverse operation, all constrained to satisfy the group axioms and with `gT` being a finite type.
   - The definition is staged: first, a structure for "base groups" (monoids with an involutive antimorphism, called `baseFinGroupType`) is provided, from which the genuine group structure is derived.
   - These structures are defined via HB (Hierarchy Builder) mixins, with canonical structures enabling type inference.

2. **Sets and Subgroups**
   - Groups and their subsets are represented as finite sets (`{set gT}`), equipped with pointwise group operations—multiplication, inverse, and conjugation.
   - The notion of a subset being a group ("subgroup") is encoded as the subtype `{group gT}` of those finite sets that are nonempty, contain the identity, and are closed under group operations. This is enforced via a predicate `group_set` and the corresponding structure `group_type` (`Group`).
   - The type `[subg G]` denotes the collection of elements in a subgroup `G` as a finite type.

3. **Cosets and Quotient Spaces**
   - Left and right cosets (of a subgroup in a group) are realized as images under group multiplication, i.e., `x *: H` and `H :* x`.
   - The sets of all cosets, and associated index computations (`#|G : H|`), are handled by appropriate definitions and notations.

4. **Conjugacy and Commutator Structures**
   - Conjugation of an element by another (`x ^ y`) and of a set by an element (`A :^ x`) are formalized as mappings under the group operations.
   - Commutators (`[~ x, y]`, `[~: A, B]`) and their associated subgroups (commutator subgroup, derived series) are constructed, together with supporting properties and notations.

5. **Normalizers, Centralizers, and Other Subgroup Constructions**
   - Normalizers (`'N(H)`), centralizers (`'C(H)`), cores (`gcore`), cycles (`<[x]>`), and generated subgroups (`<<A>>`) are all defined at the set and subgroup level.
   - Operations for abelian subgroups, maximal/minimal subgroups (`[max G | P]`, `[min G | P]`), and related notions are provided.

6. **Notation and Scopes**
   - The file introduces and systematically binds many notations for group elements and sets:
     - Product: `x * y` (elementwise), `A * B` (setwise), `G * H` (subgroup join)
     - Identity: `1`, `[1]`, `[1 gT]`
     - Inverse: `x^-1`, `A^-1`
     - Powers: `x ^+ n`, `x ^- n`
     - Conjugation: `x ^ y`, `A :^ x`
     - Commutator: `[~ x, y]`, `[~: A, B]`
     - Generated group: `<<A>>`
     - Cyclic subgroup: `<[x]>`
     - Order: `#[x]`
     - Index: `#|G : H|`
   - Multiple scopes (`group_scope`, `Group_scope`) distinguish between elementwise and explicit group structures, preventing accidental clashes.
   - Special notations for maximal and minimal subgroups are also included.

Key Conventions and Design Patterns
===================================
1. **Use of Canonical Structures and Type Inference:**
   - The extensive use of canonical structures, coercions, and typeclass instance mechanisms maximizes the advantage of Coq's type inference, allowing the properties of groups, subgroups, elements, and sets to be deduced automatically from context.
   - Operations return the "right" types to favor unification and enable set/group operations and membership to be chained and composed.

2. **Argument and Return Types:**
   - For group operations, input arguments are usually of type `FinGroup.arg_sort gT` (an alias for the underlying group type) to support correct scoping and typeclass inference.
   - The result of group operations is always of type `FinGroup.sort gT`, not the original type, to avoid interference with Coq's coercion system and allow overloading.

3. **Reflective Boolean Predicates:**
   - Key relations such as membership, subgroup conditions, commutation, normality, and abelian property are implemented as Boolean predicates, with `reflect` lemmas to link Booleans and propositional logic, facilitating use of Ssreflect tactics.

4. **Systematic Lifting and Overloading:**
   - Not only are operations defined for elements, but pointwise (setwise) analogs are provided systematically for subsets (`{set gT}`), and for subgroups, with appropriate notations and algebraic properties.
   - Many results are phrased in both setwise and groupwise terms, using the rich notation and scope mechanisms.

5. **Naming and Suffix Conventions:**
   - Suffixes encode the nature of operation or law, e.g., `M` for multiplication, `V` for inverse, `J` for conjugation, `Y` for join, `R` for commutator, `D` for addition of exponents (`expgD`), `X` for powers.
   - Prefix `s` (e.g., `sJ`) indicates the set-lifted version of an operation.
   - Standard pattern for notation such as `group1`, `mul1g`, `expgnE`, reflecting their mathematical meaning.

6. **Automation and Rewriting:**
   - The file binds many lemmas to the `gsimpl` hint database to support quick normalization and simplification of group expressions via the `gsimpl` tactic.

7. **Sectioning and Modularity:**
   - Code is carefully structured into sections according to the mathematical theme: group element identities, set/group operations, cosets, classes, normalizers/centralizers, Lagrange’s theorem, subgroup generation, cyclic subgroups and order, maximal/minimal subgroups, etc.
   - Localized "Import/Export" mechanisms are used for notation, and only intended notations are opened by default.

Interpretation and Extensibility
===============================
Any code chunk from this file—be it a definition, lemma, or notation—should be interpreted in the above context: whenever an object of type `gT : finGroupType` appears, it corresponds to a finite group in the sense of the algebraic structure. Sets and subgroups should be understood as finite sets of elements (within the ambient group), and all the algebraic operations are meant in the group-theoretic (finite) sense. 

Scopes, canonical structures, and argument types are carefully designed to minimize ambiguities, making it possible to reason both at the level of individual elements and at the level of the group and its subgroups, while exploiting automation features of the library. Notational conventions are consistently applied to enable compact and familiar mathematical notation, and lemmas are provided in both constructive (exists, exhibits) and decision/reflection form.

The file serves as the canonical reference for all subsequent finite group theory formalization in MathComp—the abstract interfaces here are expected to be used and extended in downstream files concerning permutations, matrix groups, group actions, Sylow theorems, solvable and nilpotent groups, etc.

Summary Table of Main Structures and Notations
==============================================
| Structure/Type              | Description                                    | Typical Notation         |
|-----------------------------|------------------------------------------------|------------------------- |
| `finGroupType`              | Finite group structure                         |                         |
| `{set gT}`                  | Finite set of group elements                   |                         |
| `{group gT}`                | Subgroup of gT as a set with group structure   |                         |
| `x : gT`                    | Group element                                  |                         |
| `G : {group gT}`            | Subgroup                                       |                         |
| Est. Notations              |                                                |                         |
| Multiplication              | Group element: `x * y` / Set: `A * B`          | `%g` scope              |
| Inverse                     | `x^-1`, `A^-1`                                 |                         |
| Identity                    | `1`, `[1]`                                     |                         |
| Powers                      | `x ^+ n`, `x ^- n`                             |                         |
| Conjugation                 | `x ^ y`, `A :^ x`                              |                         |
| Commutator                  | `[~ x, y]`, `[~: A, B]`                        |                         |
| Generated Group             | `<<A>>`                                        |                         |
| Cyclic subgroup             | `<[x]>`                                        |                         |
| Order                       | `#[x]`                                         |                         |
| Group join                  | `G * H`, `A <*> B`                             |                         |
| Coset                       | `x *: A`, `A :* x`                             |                         |
| Index                       | `#|G : H|`                                     |                         |
| Normalizer, Centralizer     | `'N(A)`, `'C(A)`                               |                         |
| Max/Min subgroup            | `[max G | P]`, `[min G | P]`                   |                         |
| Subgroups                   | `subgroups G`                                  |                         |

Concluding Remark
=================
This file establishes the rigorous formal setting for finite group theory in Coq, offering both the theoretical apparatus of groups, subgroups, and their operations, and the practical, automation-friendly notational and coding infrastructure needed for large-scale, mechanized algebraic reasoning.

