
Permutations over Finite Types

Overview
========
This file develops the foundational formalization of the group of permutations over arbitrary finite types, and establishes their algebraic structure and key properties. The principal Coq type constructed is `{perm T}`, representing the set of all bijections (“permutations”) from a finite type `T` to itself, implemented concretely as finite functions proven to be injective. The file also features specialized subgroups (like symmetric groups), detailed manipulation of permutation cycles, the notion of permutation parity (oddness and evenness), and canonical group-theoretic constructions—including permutation group operations, and extension principles for permutation groups on specific index types.

Mathematical Objects and Their Representation
=============================================
**1. Permutations (`{perm T}`):**
    - The main object is the group of all permutations (bijections) of a finite type `T`.
    - Implemented as the type `perm_type T`, which wraps a finite function `{ffun T -> T}` together with a proof of injectivity.
    - Permutations can be used as functions via a Coq coercion (`fun_of_perm`), so for `s : {perm T}` and `x : T`, the application `s x` evaluates the image of `x` under `s`.

**2. Symmetric Groups (`'S_n`):**
    - The symmetric group on `n` elements is identified via `{perm 'I_n}`, where `'I_n` is the canonical finite type of numbers `0` to `n-1`.
    - `'S_n` serves as the type of all permutations over `n`-element ordinals.

**3. Cycles and Orbits:**
    - The *action* of permutations is realized through `aperm x s := s x`.
    - The *orbit* (`porbit s x`) of an element `x` under a permutation `s` is the set `{s^k x | k ≥ 0}` (formally, the image of the cyclic subgroup generated by `s` acting on `x`).
    - The set of *cycles* of a permutation `s` (`porbits s`) partitions the base set `T`.

**4. Subsets and Support of Permutations:**
    - The *support* of a permutation `s` is the subset of points that it moves, characterized by the predicate `perm_on A s` (all moved points lie in `A`).
    - The subgroup of permutations fixing outside a set `S` is written as `Sym S`.

**5. Special Permutations:**
    - *Transpositions* (`tperm x y`) are permutations swapping `x` and `y` and fixing all other points, serving as generators for the symmetric group.
    - *Lifted permutations* allow embedding permutations from a smaller set into a larger one by appropriately “lifting” indices (`lift_perm`).

**6. Parity of Permutations (Odd/Even):**
    - Parity is determined by the number of cycles and the parity of the degree via `odd_perm s`. The result is coerced to `bool` via standard conventions, so for `s : {perm T}`, `(s : bool)` is `true` if and only if `s` is odd.

**7. Canonical Group Structures:**
    - The file provides canonical instances making `{perm T}` an eqType, choiceType, countType, finType, subType, and a finGroupType.
    - Operations include group composition (`*` or `perm_mul`), inversion (`^-1` or `perm_inv`), and identity (`1` or `perm_one`), with associated standard group properties.

**8. Operations on Index Types:**
    - There is extensive support for casting and mapping permutations between different types of the same cardinality (`cast_perm`), as well as functorial actions (such as `inj_tperm`).

Key Conventions and Notations
=============================
1. **Notation and Scope:**
    - Curly brace notation `{perm T}` denotes the type of all permutations on a finite type `T`; permutations over `'I_n` (the `n`-element type) are denoted `'S_n`.
    - Application of a permutation to an element uses expression `s x`, automatically referring to the function encapsulated by `s`.
    - Big group operations (e.g., `\prod`) can be reindexed along permutations using the helper `reindex_perm s`.

2. **Coercions:**
    - Permutations are coerced automatically to functions, enabling seamless use in functional contexts.
    - Similarly, a permutation may be coerced to `bool` (for its parity).

3. **Support and Subgroups:**
    - If a permutation has support confined to a set `S`, this is witnessed by `perm_on S s`.
    - The subgroup fixing points outside `S` is represented as `Sym S`.

4. **Cycle and Orbit Treatment:**
    - Orbits and cycles are handled directly on permutations through the `porbit` and `porbits` constructions, independent of the general theory of group actions, both for specificity and to avoid circular dependencies.

5. **Transpositions and Pairs:**
    - Transpositions (`tperm x y`) and sequences of them are used extensively in decompositions and parity computations.
    - Distinct pairs are encoded by the `dpair` predicate for use in expressing products of disjoint transpositions.

6. **Permutation Lifting and Casting:**
    - When permutations need to be “lifted” to act on a larger type, or embedded into a group of permutations for a different type with the same size, this is accomplished via `lift_perm` and `cast_perm`, with supporting lemmas guaranteeing group isomorphisms.

7. **Canonical Structures and Inheritance:**
    - All relevant canonical structures are registered, allowing permutations to be used seamlessly with generic theory from finite types, sets, and groups, and interoperate smoothly with the MathComp ecosystem.

File Organization and Usage Context
==================================
This file forms the foundational layer for all subsequent formalization of permutation groups within the MathComp environment, and is widely used throughout MathComp modules involving group actions, combinatorics, and linear algebra. It supplies both the types and the algebraic operations (with their mathematical validation) needed for any task involving symmetries or rearrangements of finite collections.

Developers should note that:
- The interface is highly idiomatic MathComp (“small-scale reflection” style), using reflection, predicative sets, and canonical structures.
- The theory is carefully organized so that basic permutation properties can be applied without reference to deeper group theory.
- Many advanced results (such as the sign function, or orbit decompositions) are realized directly here both for practical and dependency management reasons.

In summary, this file is the definitive reference for the construction, manipulation, decomposition, and basic group-theoretic properties of permutations of finite types, and underpins further developments in combinatorics, algebra, and representation theory in Coq.
