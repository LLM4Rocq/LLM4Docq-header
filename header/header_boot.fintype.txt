
Finite Types: Foundations and Operations

Overview
========

This file is the foundational module for **finite types** in the Mathematical Components (MathComp) library for the Coq proof assistant. Its main objective is to provide a uniform interface, implementation, and supporting lemmas for working with types that have a finite number of elements. It also introduces associated subtypes, constructions, quantifiers, and combinators tailored for finiteness. The definitions and conventions established in this file underpin much of MathComp's algebraic and combinatorial developments, permitting systematic enumeration and decidable reasoning about finite mathematical structures.

Mathematical Scope and Objects
==============================

### Finite Types

- **Finite Type (finType):** This is a core interface for types with finitely many inhabitants, each of which can be enumerated exactly once. Mathematically, a finite type \( T \) is one equipped with an explicit, duplicate-free enumeration of all its elements. In Coq, a `finType` is a structure over an `eqType` (types with decidable equality), endowed with an additional axiom stating the existence of a unique, exhaustive sequence (`seq T`) listing all elements.
- **Finite Axiom:** The sequence `enum : seq T` for a type \( T \) must satisfy the axiom that for all \( x : T \), `count_mem x enum = 1` (i.e., every element appears exactly once in the enumeration).

### Subtypes of Finite Types

- **SubFinite Type (subFinType):** For a predicate \( P : T \to \text{bool} \) over a `finType` \( T \), the file defines the subtype of \( T \) with elements satisfying \( P \), together with a corresponding enumeration. Subtypes preserve finiteness and permit reasoning about finite sets defined by arbitrary predicates.

### Ordinals and Bounded Integers

- **Ordinal Type (`'I_n`):** For each natural number \( n \), the type `'I_n` encodes the set \( \{ 0, 1, ..., n-1 \} \) as a subtype of `nat`. This is a canonical example of a finite type, and it serves as a universal enumeration domain for types of cardinality \( n \).
- Various operations are defined on `'I_n`, including successor/predecessor functions (`ordS`, `ord_pred`), index shifting (`lshift`, `rshift`), splitting (`split`, `unsplit`), and mappings (`lift`, `unlift`). There is also a mechanism for "casting" between different ordinal types of equal cardinality.

### Enumerations, Cardinalities, and Images

- **Enumeration (`enum`):** For any collective predicate \( A \) over \( T \), `enum A` produces a duplicate-free list of all \( x \in T \) such that \( A(x) \).
- **Cardinality (`#|A|`):** Denotes the number of elements satisfying a predicate \( A \) (i.e., the size of `enum A`).
- **Images and Codomains:** For \( f : T \rightarrow T' \), `image f A` gives the list of \( f(x) \) for \( x \in A \). `codom f` is the image over all \( T \).

### Boolean Quantifiers and Predicates

- **Finitary Quantifiers:** This file defines Boolean variants of quantifiers restricted to finType domains, such as `[forall x, P x]` (universal) and `[exists x, P x]` (existential), including versions constrained to predicates or bounded domains. These quantifiers are well-suited to combinatorial proofs, as they are computable and externally decidable.
- **Predicates on Subsets:** Includes standard set-like operations (`\subset`, `\proper`, `disjoint`, etc.) and reflection lemmas bridging Boolean predicates to standard mathematical statements.

### Additional Combinators and Constructions

- **Products/Sums of Finite Types:** The file constructs the finType structure for Cartesian products, disjoint sums, and indexed collections.
- **Explicit Enumeration subtypes:** The module provides a mechanism to create subtypes from explicit, possibly non-canonical, enumerations, together with all the requisite instances and lemmas.

Key Coding and Notational Conventions 
=====================================

**1. Hierarchy Boilerplate (HB):**
   - Uses HB (Hierarchy Builder) classes and mixins to modularly compose qualities like Equality, Choice, Countability, and Finiteness. All finTypes build on eqTypes, with various structures and canonical instances to ensure smooth typeclass resolution.
  
**2. Notation and Syntax:**
   - Custom notations are introduced for cardinality (`#|A|`), enumeration (`enum A`), subsets (`A \subset B`), proper subsets, disjointness, and quantified Booleans (`[forall ...]`, `[exists ...]`).
   - There are many variants of sequence comprehensions (`[seq F | x in A]`), set membership, and subtyping, designed for syntactic convenience and consistency.

**3. Implicit Arguments and Coercions:**
   - Use of `Set Implicit Arguments` ensures that type arguments are inferred whenever possible.
   - Coercions are used to seamlessly interpret subtypes (e.g., elements of `'I_n` as `nat`).

**4. Reflection and Boolean Reasoning:**
   - Whenever possible, Boolean predicates (e.g., quantifiers, subset, injectivity) are paired with reflection lemmas, allowing interoperability between computation and logical reasoning within proofs.

**5. Core Construction Patterns:**
   - Canonical finType structure is propagated to standard types (`unit`, `bool`, `void`, options, products, sums, subtypes, records).
   - There is a generic mechanism for building finType structures from explicit enumerations (`seq_sub`) and explicit isomorphisms (via pack/unpack morphisms).

**6. Extensibility:**
   - The interface is designed to allow extension to more complex combinatorial and algebraic objects (e.g., vector spaces, groups), and all basic data about enumeration, cardinality, and finitary quantifiers is programmatically available.

Context for Retrieval and Interpretation
=======================================

This file provides the definitive reference for the treatment of finite types within MathComp. Any code chunk in this file is related to the construction, manipulation, or reasoning about finite types and their subtypes, ordinal types, Boolean quantifiers over finite domains, and associated cardinalities and set operations. The choice of explicit, computable enumerations underpins virtually all reflection, automation, and combinatorial argumentation in MathComp. Notational conventions and instance-building code are essential to ensure properties and operations are available in the expected form throughout the library.

A user or tool reading this docstring can expect:
  - All types called `finType` represent types with finite, computable enumerations, with unique, well-defined cardinalities.
  - Quantifiers, set operations, and images are computable and support rich Boolean/reflection infrastructure.
  - Any lemma involving cardinalities, quantifiers, or images refers to these explicit, constructive notions.
  - Extension code follows established patterns, with standard conventions for subtypes, products, sums, and indexed families.

Understanding this context is sufficient to accurately interpret, comment on, or extend any individual definition, theorem, or construction found in this file, and to relate it to both mathematical practice and its concrete, mechanized realization in Coq.
