
(******************************************************************************)
* Docstring: MathComp Order Structures and Order Theory
*******************************************************************************

Overview and Purpose
--------------------

This file provides the foundational definitions, structures, interfaces, notations, and basic theory for working with partially and totally ordered types, semilattices, lattices, distributive/complemented lattices, and related morphisms in the Mathematical Components (MathComp) library for the Coq proof assistant. It leverages the Hierarchy Builder (HB) framework to define a flexible, extensible hierarchy of ordered algebraic structures, equipping common mathematical types (e.g., `nat`, `bool`, products, sequences, sets, tuples, and finite types) with relevant order structures. The file also specifies a comprehensive, modular system of notations and conventions for manipulating these structures and their morphisms in Coq proofs.

Mathematical Objects and Interfaces
-----------------------------------

**Order Structures:**
- *Preorder*: A type with a reflexive and transitive relation (≤).
- *Partial Order (`porderType d`)*: Adds antisymmetry to preorder; includes both ≤ and < relations.
- *Order with extremal elements*:
  - With bottom (`bPOrderType`): has a least element ⊥ (bot).
  - With top (`tPOrderType`): has a greatest element ⊤ (top).
  - With both (`tbPOrderType`).
- *Meet Semilattice (`meetSemilatticeType`)*: Equipped with a binary meet (greatest lower bound) ∧ (notated `&`).
- *Join Semilattice (`joinSemilatticeType`)*: Equipped with a binary join (least upper bound) ∨ (notated `|`).
- *Lattice*: Both a meet and join semilattice; meet and join satisfy absorption laws.
- *Distributive Lattice*: Lattice in which meet and join distribute over each other.
- *Total Order (`orderType`)*: Every pair of elements is comparable; can be equipped to define min and max as meet and join.
- *Complemented (Boolean) Lattices*: Lattices with a (relative/sectional/dual) complement operation, e.g., Boolean algebras.

**Finite Structures:**
- All of the above (where meaningful) exist in _finite_ variants for types with finite underlying sets.

**Product and Sequence Orders:**
- *Product Order (`prod`)*: Ordered lexicographically or by product, for both binary products and tuples/sequences.
- *Lexicographic Order (`lexi`)*: For products, tuples, and sequences, ordering pairs or sequences lexicographically.
- *Set Inclusion Order (`{subset T}`)*: The canonical subset/inclusion order.

**Substructures:**
- *Subobject Orders*: Subtypes of ordered structures (defined by a predicate) inherit an order when the predicate is closed under relevant operations and extremal elements.
- *Closedness Predicates*: Properties stating that a subset is closed under certain operations (meet, join, includes bot/top).

**Order Morphisms:**
- Morphisms (structure-preserving maps) for (semi)lattices and lattices, with varying degrees of preservation (e.g., order, meet, join, bot/top).
- Special notation and type classes for morphisms: e.g., `{mlmorphism T -> T'}` for meet lattice morphisms.

**Order Theories and Lemmas:**
- General theory on comparison, min/max operations, monotonicity, case analysis (reflect lemmas), and big operations (e.g., iterated min/max, meet/join) over finite sets, sequences, and tuples.
- Special theory for natural numbers, Boolean values, ordinal types, and divisibility (gcd/lcm) for the natural numbers.

Representation Conventions in Coq
---------------------------------

**Type Classes and Structures:**  
All algebraic structures (e.g., lattice, order, semilattice) are manifest as HB structures; their canonical instances are maintained by the HB framework, so inference and coercion work uniformly throughout MathComp. Every structure takes a "display" as the first argument (see below).

**Displays:**  
A "display" is a tag that distinguishes different orderings on the same carrier type (e.g., ≤ vs. divisibility on `nat`, product vs. lexicographic order on `prod` or `seq`). Most generic definitions take a display as their first argument, ensuring the right notations and structures are used for each instance.

**Aliases and Canonical Instances:**  
Common instances (e.g., for `nat`, `bool`, tuples, sequences) are made canonical via HB. Aliases (such as `natdvd` for `nat` with the divisibility order) enable selection of "alternate" orderings.

**Notation and Scopes:**
- Core order relations (≤, <, ≥, >) and operations (meet `&`, join `|`, difference `\`, complement `~`) have reserved notations within `order_scope`, which is delimited by `%O`.
- Iterated operations (big meet, join, min, max, gcd, lcm, etc.) are provided with rich notational support for sequences, sets, ranges, and indices.
- Notations differentiate product order, lexicographic order, and dual order, with superscripting such as `^d`, `^p`, `^l`, `^sp`, `^sl` (e.g., `&^d`, `|^l`).
- Specialized notations exist for divisibility on `nat` (using `%|`, `%<|`, `gcd`, `lcm`, and big iterated gcd/lcm notations).
- Notation for morphisms (`{mlmorphism T -> T'}`, etc.), substructure building, and closedness predicates is standardized.

Key Coding and Mathematical Conventions
---------------------------------------

1. **Displays as Type Arguments:**  
   Canonical structure inference operates on the carrier type or its alias (not on the display tag). Displays control printing and notation selection but not instance search.

2. **Overloading and First Arguments:**  
   All overloaded operations and relations, including order comparison and operations, take the display as their first argument, followed by the minimal required structure (e.g., `@Order.le d T x y`).

3. **Canonical Min/Max as Meet/Join in Total Orders:**  
   In total orders, `min` and `max` are defined as the meet and join respectively.

4. **Duals and Products:**  
   Every order comes with a dual instance (order reversal), as well as canonical product and lexicographic product orders (both for `prod`/tuples/sequences and for sets).

5. **Substructures via Closedness:**  
   Subtypes can inherit ordered/lattice structures when the predicate is closed under the corresponding operation(s). There are systematic notations and mixins to build such substructures.

6. **Iteration and Big Operations:**  
   Iterated min, max, meet, join, gcd, and lcm are provided with notations and abstractions that mirror sum/bigop infrastructure in MathComp.

7. **Morphism Hierarchy:**  
   Morphism interfaces exist for (semi)lattices and lattices, parameterized by which structure they respect. Composition and identities are handled via instances.

8. **Reflect and Case Analysis:**  
   Main comparison lemmas support `reflect` for case analysis on orderings (e.g., `leP`, `ltP`, etc.)—critical for proof automation.

9. **Extensibility:**  
   Users can define additional displays and add new orders (with associated notations) by following documented idioms; e.g., for defining divisibility order or lexicographic orders.

10. **Instances and Theory Modularization:**  
    Most theory and instance declarations are organized in modules (`Order.LTheory`, `Order.CTheory`, `Order.TTheory`, `Order.Theory`) that can be selectively `Import`-ed to control the scope and namespace opened. Syntax imports are similarly modularized.

Scope of Mathematical Development
---------------------------------

- Abstract order theory (preorders, partial/total orders, meets/joins)
- Lattice theory (semilattices, lattices, distributive/complemented lattices, Boolean lattices)
- Order-theoretic big operations (iterated min/max, meet/join, gcd/lcm, set operations)
- Canonical ordering on common data types: natural numbers (including both ≤ and |), booleans, finite types, sequences, tuples, products, sets.
- Robust, extensible library of notations and proof principles for order reasoning in Coq.
- Encapsulation of morphism concepts and substructure inheritance.
- Efficient transport of orderings under isomorphisms and with finite/canceling functions.
- Specialized order infrastructures for divisibility on `nat`, inclusion on `set`, etc.

Contextual Guidance for Code Interpretation
-------------------------------------------

- **HB Structures and Canonical Inference:** Structures use the Hierarchy Builder; types like `porderType d`, `latticeType d`, etc., are wrappers that equip a type `T` with the chosen order structure (over display `d`). To understand any interface or operation, check which structure class it is a method of.
- **Displays Mechanism:** Displays (e.g., `nat_display`, `dvd_display`, `prod_display`, etc.) specify not just which order, but also which notation and printing conventions to use. This permits, for example, printing `x %| y` for divisibility, and `x <= y` for the usual order.
- **Notation Customization:** Reserved notations are used for order operations, and custom displays allow new notational classes to coexist without conflict.
- **Theory Modularization:** Theory is divided across modules (`LTheory`, `CTheory`, `TTheory`, etc.) to allow users to import only the relevant part of the order theory (e.g., only partial order, or full total order theory).
- **Substructures and Morphisms:** There is a systematic and composable mechanism for constructing subtypes with inherited structure, provided closedness predicates are met, and for specifying morphisms between structures at varying levels of abstraction.
- **Finite Structures:** For finite types, there are parallel classes and bigop notations corresponding to order-theoretic operations (min/max/meet/join/etc.) applied to finite sets, sequences, and tuples.
- **User Extensibility:** The system has been designed for extensibility; adding new instances, displays, and notational classes (such as divisibility or lexicographic orderings) is supported and follows conventions set out in documented idioms.

Intended Use
------------

This file underpins the MathComp ecosystem’s abstract algebra, combinatorics, and finite structure libraries by providing a highly generic and extensible infrastructure for formalizing and reasoning about ordered sets and lattices. It is designed to minimize boilerplate, maximize inference and notation reuse, and ensure that a wide range of common (and custom) types can be equipped with robust, proof-friendly order-theoretic operations and theorems.

(End of docstring)
