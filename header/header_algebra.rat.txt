
(** Rational Numbers in Coq: Algebraic Structures and Decision Procedures

Overview and Purpose
====================
This file implements a formalization of the field of rational numbers, denoted ℚ, within the Coq proof assistant. The main objective is to define a `rat` data type representing reduced rational numbers, equip it with algebraic structures making it an archimedean real field (in the sense of ordered fields with the archimedean property), and to integrate it with the Mathematical Components (MathComp) library's hierarchy for algebraic, order-theoretic, and numerical structures.

Beyond simply defining rationals and their arithmetic, the file also offers:

- Efficient normalization and equality for rational numbers.
- Proper notations and decimal parsing (e.g., `3.14%Q` for the rational 157/50).
- Coercions from integers and natural numbers to rationals.
- Decision procedures for problems such as membership in integral spans.
- Interoperability with ring and field tactics, and transfer of mathematical properties (morphisms, ordering, floor/ceiling/truncation) to other algebraic structures.

Mathematical Objects and their Representations
==============================================

1. **Rational Numbers (`rat`)**
   
   - **Type Definition**: A rational number is represented as an ordered pair `(num, den)` of integers (`int * int`), where the denominator `den` is strictly positive and `num` and `den` are coprime. This ensures that every `rat` is in a canonical reduced form. The data type is defined as a record:

      ```
      Record rat : Set := Rat {
        valq : (int * int);                 (* underlying numerator and denominator *)
        _ : (0 < valq.2) && coprime |valq.1| |valq.2|  (* soundness proof *)
      }.
      ```

   - **Normalization**: All arithmetic and construction operations ensure that rationals are always kept in reduced form.

   - **Special Notations**:
       - `n%:Q` is the canonical injection from integers `int` to rationals, mapping `n` to `n/1`.
       - `x%Q` as a postfix denotes that `x` is treated as a rational.
       - The explicit notation `[rat x // y]` (for debugging and printing) displays a reduced form, but the canonical representation is preferred for computation.

2. **Numerator and Denominator Accessors**
   
   - `numq r` retrieves the numerator of a rational `r`, by accessing the first component of `valq`.
   - `denq r` retrieves the denominator (guaranteed positive), by accessing the second component.

3. **Arithmetic Operations**
   
   - **Addition (`addq`)**, **Opposite (`oppq`)**, **Multiplication (`mulq`)**, and **Inverse (`invq`)** are defined at the level of numerator/denominator pairs, always producing reduced forms.
   - Special care is taken to optimize arithmetic when operands are integers.
   - Operations are "locked" to control when computations are actually reduced, aiding both performance and proof normalization.

4. **Coercions and Embeddings**
   
   - **From Integers/Naturals**: Both `int` and `nat` declare coercions into `rat`. This enables seamless writing of expressions involving mixed types, with the convention that `n%:Q` stands for the rational `n/1`.
   - **To Other Rings/Fields**: The function `ratr` provides a generic embedding of `rat` into any ring with unity (specifically, any `unitRingType`), as the fraction of the images of numerator and denominator.

5. **Ordering and Real Field Structure**
   
   - The usual order relation is defined (`le_rat`, `lt_rat`) via cross-multiplication: e.g., `x <= y` iff `numq x * denq y <= numq y * denq x`.
   - Absolute value (`normq`) and sign (`sgr`) are defined in accordance with standard conventions.
   - The type is equipped with the MathComp structures for fields, ordered rings, and real/archimedean/numdomain, meaning all associated properties and tactics work for `rat`.

6. **Floor, Ceiling, Truncation**
   
   - Procedures for computing the floor, ceiling, and truncation to integers or naturals are provided, and reflected as methods in the MathComp hierarchy.

7. **Integral Spans and Decidability**
   
   - The predicate `inIntSpan X v` expresses that `v` is an integral (integer-coefficient) linear combination of a finite family `X`.
   - Decision procedures for this property over Q-vector spaces are provided, including algorithms to solve for such representations or to decide their nonexistence.

8. **Polynomial Scaling and Irreducibility**
   
   - Operations converting between integer and rational polynomials, including scaling procedures, divisibility, and criteria for irreducibility (e.g., Eisenstein's criterion), are formalized.

Notational and Coding Conventions
=================================

- **Scopes and Notations**:
    - Many notations are defined in the `rat_scope`, delimited with `%Q`, for example, `3.14%Q`.
    - Arithmetic on `rat` uses standard infix operators such as `+`, `-`, `*`, `/`, and unary `-`, but within the appropriate scope, so these denote rational operations.
    - Coercions (`%:Q`) are the canonical way to import integers or naturals into the rational type.
    - The notation `[rat x // y]` is used for pretty-printing or debugging, but should not be relied on for canonicalization or proofs.

- **Normalization and Reduction**:
    - Definitions of arithmetic operations are carefully "locked" (depending on the explicit constructor form) to avoid premature or unwanted reduction in proofs and computations.
    - All rationals are stored and manipulated in reduced, canonical form (coprime numerator and denominator, denominator positive).

- **Equality and Canonical Forms**:
    - Equality on rationals is defined in terms of equality of normalized numerator and denominator, or, for calculation, as cross-product equality (`a/b == c/d` iff `a*d == c*b`).
    - Lemmas such as `fracqE` describe the canonical way all rationals should be represented internally.

- **Type Classes and Instances**:
    - The type `rat` is equipped with MathComp's typeclass (structure) instances for decidable equality, countability, ring and field structures, order, and archimedean property.
    - Generic morphisms (e.g., `ratr`) are proved to preserve the relevant algebraic properties, so that algebraic tactics can be used transparently.

- **Integration with Tactics**:
    - Custom tactics (`rat_to_ring`, `ring_to_rat`) and associated rewrite rules allow rational expressions to be shifted conveniently between `rat` and general ring/field expressions in proofs.

- **Parsing and Printing**:
    - Parsing hooks are supplied so that decimal and integer literals (like `3.14%Q` or `-3%Q`) are parsed as rational numbers.
    - Printing ensures that rationals are always displayed in normalized form.

- **Sectioning and Locality**:
    - The file is organized into sections reflecting different mathematical themes, with local notation conventions and implications for the surrounding proof environment.

Context and Guidance for Code Extraction and Commentary
======================================================

This file forms the foundational rational number implementation underlying MathComp's algebraic and geometric developments. When interpreting or documenting particular code regions:

- The overarching convention is that **all rational terms are always stored and manipulated in reduced form**; direct constructor use should respect this invariant.
- **Arithmetic and ordering mimic standard textbook definitions**, but attention is paid to normalization and constructive content (i.e., all division/inverse operations check for zeroes and handle edge cases constructively).
- **Typeclass instances** are critical: `rat` supports all the interfaces necessary for working as a field, ordered field, and archimedean structure, and can be used interchangeably with other compatible types in generic MathComp proofs.
- **Decidability and constructive witnesses** are provided for algebraic predicates wherever possible, reflecting Coq’s constructive logic.
- All code should be interpreted with an understanding of MathComp’s style of **"small-scale reflection"**, where Boolean values and propositional statements are tightly connected, and proof scripts often manipulate Boolean identities and normal forms rather than only working at the level of propositions.

This context ensures that comments and documentation for specific code chunks can reference or depend upon these high-level principles, without requiring inspection of the file in its entirety.

*)
