
(** Abelian Group Structure and Elementary Abelian Subgroup Theory

===============================================================================
Purpose and Main Objective
===============================================================================
This module provides a comprehensive formalization of key structural properties of (finite) abelian groups within the Coq proof assistant, leveraging the Mathematical Components (MathComp) framework. Its focus is on developing the foundational definitions, invariants, and functorial constructions relevant to abelian and especially *elementary abelian p-groups*, as well as their role as building blocks for finite group theory. 

The module introduces and studies critical numerical invariants (such as exponent, rank, and minimal generator number), characterizes abelian groups via their decomposition, and establishes infrastructure to reason about, classify, and operate on abelian (and related) subgroups in arbitrary finite groups. These results and apparatus form the algebraic core needed not only for abelian group theory, but also for significant applications such as the proof of the Odd Order Theorem and the analysis of p-group structure.

===============================================================================
Mathematical Objects and Their Representations
===============================================================================

1. **Groups and Subgroups**

    - **Finite Groups:** The parameter `gT : finGroupType` refers to a finite group type, whose elements are of type `gT`.
    - **Sets and Subgroups:** `{set gT}` denotes a set of group elements (often a subgroup), and `{group gT}` denotes a subgroup as a carrier set together with its group structure.

2. **Element Orders, Exponent, and Divisibility**
   
    - **Element Order (`#[x]`):** The order of an element `x` is expressed as `#[x]`.
    - **Divisibility**: Standard notation such as `%|` for divisibility is used, e.g. `k %| n` means "k divides n".
    - **n-th Roots of Unity and Divisibility Set**:
        - `'Ldiv_n()`: The set of *all* elements in the ambient group of order dividing `n` (elements `x` with `x^n = 1`). Representation: `[set x : gT | x ^+ n == 1]`.
        - `'Ldiv_n(G)`: Elements of a specific set/subgroup `G` whose order divides `n`: `G :&: 'Ldiv_n()`.
   
    - **Exponent (`exponent G`):** The least positive integer `e` such that `x ^+ e = 1` for all `x âˆˆ G`, i.e., the least common multiple of all element orders in `G`.

3. **Ranks and Generation**

    - **Minimal Generator Number (`'m(G)`):** The size of a smallest generating set for `G` (coincides with the dimension for vector spaces and bases for abelian groups).
    - **p-Rank and General Rank:**
        - **p-Rank (`'r_p(G)`):** The maximal rank (logarithmic in the order) for elementary abelian p-subgroups of `G`.
        - **Rank (`'r(G)`):** The maximal rank for any elementary abelian subgroup of `G` over all possible primes.
   
4. **Abelian, Cyclic, and Homocyclic Structure**

    - **Abelian Groups (`abelian G`):** Groups where all elements commute, checked by the predicate `abelian`.
    - **Abelian Type (`abelian_type G`):** A canonical sequence (in decreasing order) of invariant factors from a minimal basis of the abelian group `G`. This sequence classifies abelian groups up to isomorphism.
    - **Homocyclic Groups (`homocyclic G`):** Abelian groups that are direct products of cyclic groups of equal order; characterized by constant abelian type.

5. **Elementary Abelian Subgroups**

    - **Elementary Abelian p-Groups (`p.-abelem G`):** Subgroups that are abelian, p-groups, and have exponent p (i.e., isomorphic to a vector space over F_p). 
    - **Elementary Abelian Subgroups for Some Prime (`is_abelem G`):** Subgroups that are elementary abelian p-groups for some prime p.
    - **Collections of Elementary Abelian Subgroups:**
        - **All elementary abelian p-subgroups:** `'E_p(G)`; those E in `G` with p.-abelem E.
        - **Of fixed rank n:** `'E_p^n(G)`; those E in `'E_p(G)` with order p^n.
        - **Maximal elementary abelian p-subgroups:** `'E*_p(G)`.
        - **Of unspecified prime but fixed rank:** `'E^n(G)`.
    - **Related Invariants and Objects:**
        - **Generators:** Witnesses for subgroups attaining these maximal ranks or minimal generating sets are formalized for use in constructive and computational arguments.

6. **Ohm and Mho Functors**

    - **Ohm Subgroups (`'Ohm_n(G)`):** Subgroup generated by elements of `G` whose order divides p^n (typically for p-groups), generalizing the concept of p-torsion subgroups.
    - **Mho Subgroups (`'Mho^n(G)`):** Subgroup generated by p-powerings of p-elements, i.e., all `x ^ (p ^ n)`, capturing the "higher commutator" structure in p-groups.

7. **Interaction with Morphisms, Quotients, and Isomorphism**
   
    - The module develops extensive infrastructure to transport all the above invariants and constructions through:
        - **Group morphisms (homomorphisms):** Images and preimages.
        - **Injective morphisms (monomorphisms):** Transfer of structure when mapping into an isomorphic image.
        - **Isomorphisms:** Preservation of invariants across isomorphic groups.
        - **Quotients:** Behaviour of subgroups and ranks in factor groups under normal subgroups.

8. **Module and Ring Contexts:**
   
    - At the end, abelian groups are related to additive groups of finite modules and rings (especially finite fields and their modules), showing that these are elementary abelian in characteristic p contexts.

===============================================================================
Key Notational and Coding Conventions
===============================================================================

- **Notation for Functors and Sets:** The module adopts a systematic single-quote notation (`'Ldiv_n`, `'E_p`, `'r_p`, etc.) that is uniform and mnemonic, mirroring pen-and-paper group theory conventions.
    - For example, `'E_p^n(G)` denotes the set of elementary abelian p-subgroups of `G` of order p^n, and `'Ohm_n(G)` the nth Ohm subgroup.
- **Set and Group Notation:**
    - Square brackets `[set E : {group gT} | ...]` denote sets of subgroups satisfying given properties.
    - Parentheses and left-associative application (no explicit operators) are often used for subgroup containment (e.g., `E \subset G`).
    - Big operators (such as `\max_`, `\bigcup_`, etc.) are used in expressions for maximal rank or unions over primes.
- **Implicit Arguments:** The `Set Implicit Arguments.` and related declarations allow for concise notation, focusing on mathematical content.
- **Type Classes:** Canonical structures such as `Ohm_group` enable these subgroups to interact smoothly with the MathComp hierarchy.
- **Group Actions and Conjugation:** Notation such as `(G :^ x)` denotes the conjugate of the subgroup `G` by `x`.
- **Element and Subgroup Predicates:** Boolean predicates (e.g., `abelian G`, `p.-abelem G`) are extensively used, supporting reflection between Boolean and propositional styles of argument.

===============================================================================
Interpretation Guidance and Use Context
===============================================================================

This module is foundational for formalizing arguments about finite abelian groups, especially in the context of the classification of such groups and the subgroup structure of arbitrary finite groups. The file's definitions and theorems enable one to:
- Systematically construct and distinguish all elementary abelian p-subgroups and their invariants within a group.
- Relate abstract algebraic properties (exponent, type, generator rank) to computationally accessible data and canonical representatives.
- Analyze how these properties are preserved or computed under morphisms, quotients, isomorphisms, or extension to modules over finite fields/rings.
- Use the provided notations and conventions to express pen-and-paper arguments in a directly formalizable, reusable form within Coq.

When navigating or commenting on code extracted from this file, keep in mind that all notions are formalized with precise, computable predicates and that all invariants are tightly coupled with the MathComp finite group hierarchy. Boolean-valued predicates (with reflection lemmas) are pervasive, ensuring compatibility with the SSReflect style of structured equational reasoning.
