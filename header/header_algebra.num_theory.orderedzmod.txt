
Number Structures with Order and Norms

Overview
========
This file introduces and formalizes fundamental abstract algebraic structures for "number-like" entities, specifically those that combine ordered additive group properties with an optional notion of norm. The constructions and notations provided here serve as a mathematical and notational foundation for further developments in real algebra, ordered rings, and numerical analysis within the Coq proof assistant.

Purpose and Goal
================
The primary objective of this file is to define a hierarchy of algebraic structures—namely partially ordered additive groups (called "ordered Z-modules")—as building blocks for working with real numbers, ordered rings, and their generalizations in formal verification. This enables the development of ordered algebraic mathematics within the MathComp ecosystem by equipping algebraic structures with compatible order relations and introducing concise, expressive notations for reasoning about order, positivity, and related concepts.

Mathematical Objects and Their Representations
==============================================
This file manipulates several critical mathematical objects:

1. **Ordered Z-Module (POrderedZmodule) / porderZmodType**:
   - This is an additive commutative group (a "Z-module" or abelian group under addition) equipped with a partial order that is compatible with its algebraic structure.
   - In Coq, such a structure is defined as an instance of the `POrderedZmodule` HB (Hierarchy Builder) class, which requires that a type be both a `Zmodule` and a partially ordered type (with ordering given via `Order.POrder`).
   - The canonical (short) Coq type for such structures is `porderZmodType`.

2. **Order Relations and Symbols**:
   - The standard order relations are instantiated and scoped for number-like structures (`ring_scope`), providing the following notation:
     - `<=`, `<`, `>=`, `>`, as well as extended notations for comparability and partition of order:
        - `x <= y`, `x < y`, `x >= y`, `x > y`
        - `x <= y ?= iff C`: order with equivalence condition
        - `x < y ?<= if C`: strict order with a Boolean side condition
        - `x >=< y`: comparability predicate for partial orders
        - `x >< y`: incomparability predicate
     - Lattice operations `min`, `max` are also available as `minr`, `maxr`.

3. **Qualifiers and Order Predicates**:
   - The file defines several predicates to classify elements of a number structure:
     - `Rpos x` (`x \is a Num.pos`): x is positive (i.e., `0 < x`)
     - `Rneg x` (`x \is a Num.neg`): x is negative (i.e., `x < 0`)
     - `Rnneg x` (`x \is a Num.nneg`): x is non-negative (`0 <= x`)
     - `Rnpos x` (`x \is a Num.npos`): x is non-positive (`x <= 0`)
     - `Rreal x` (`x \is a Num.real`): x is real (`0 <= x` or `x <= 0`), a notion often used to characterize "real" elements vs. non-real (complex) in more general structures.
   - These qualifiers are implemented via `qualifier` objects, enabling their use as membership predicates in formal proofs.

4. **Prefixes for Specialized Predicates**:
   - Several letter prefixes are suggested as a naming convention for more refined order-related predicates:
     - `p`: positive; `n`: negative; `sp`: strictly positive; `sn`: strictly negative
     - `i`: interior (e.g., in interval [0,1] or (0,1))
     - `e`: exterior (e.g., in interval [1, ∞) or (1, ∞))
     - `w`: weak monotonicity (non-strict)

Key Notational and Coding Conventions
=====================================
- **Scopes and Notation Disambiguation**:
  - All order relations (`<`, `<=`, etc.) and lattice operations on these structures are bound to the `ring_scope`, ensuring that they do not conflict with similar notations from other structures or libraries.
  - Suffixes like `%R` (e.g., `<%R`) are reserved to distinguish these operations when necessary, although in practice the main notations are provided without the suffix for convenience.

- **Importing and Modularity**:
  - The definitions and notations are organized within the `Num` module. Typical usage entails importing either `Num.Def` (for short names) or `Num.Theory`, providing users with flexibility in what symbols and constructions they bring into their context.

- **Qualifier and Predicate Usage**:
  - Qualifiers are defined as parameterized objects and are designed to be used with the `\is a` testing notation, e.g., `x \is a Num.pos` which expands to a Boolean predicate.
  - This uniform Boolean-based approach is compatible with Ssreflect’s rewriting tools and allows seamless proof automation and integration.

- **Order and Lattice Operations**:
  - The order structure is set up to support all standard comparisons and lattice-theoretic operations, with uniform syntax matching both pure order theory and real algebra semantics.
  - Double and chained comparisons are provided by Boolean conjunctions (e.g., `x <= y < z`).

- **Canonical Symbolic Syntax**:
  - All key order-theoretic notations, comparability, and lattice operators are provided as both infix, prefix, and symbolic forms, with specialized variants available when shorter names are not in scope.

- **Precedence and Function Syntax**:
  - Notation like `@ler R` enables explicit targeting of the order relation for a specific type parameter, supporting generic proofs and definitions.

Summary
=======
In summary, this file lays the groundwork for reasoning about algebraic structures that are simultaneously ordered and additive—serving as the basic infrastructure for later developments in real algebra and ordered fields within formalized mathematics. It provides both the abstract definitions and rich, user-friendly notations for working with such structures, alongside a disciplined naming and scoping convention that makes it easy to scale and reuse in larger formal proof developments.
