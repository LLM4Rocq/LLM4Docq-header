
(** Extremal p-Groups: Structures, Presentations, and Classification

Overview and Purpose
====================
This Coq file formally defines, constructs, and develops the core theory of *extremal p-groups* within the setting of finite group theory, using the Mathematical Components (MathComp) library. The file's principal purpose is to provide canonical representatives, algebraic presentations, and structural theorems for all classes of non-abelian extremal p-groups—primarily groups with a cyclic maximal subgroup—and to characterize them both individually and collectively. The foundational reference point is the classification given in Section 23 of Aschbacher’s group theory text, along with relevant exercises.

The module is intended as a self-contained backbone for advanced algebraic and classification results about finite p-groups, notably those appearing in the proof of the classification of finite simple groups and the general study of group extensions.

Mathematical Scope and Central Objects
======================================
The mathematical focus is on finite groups of prime power order ('p-groups') that are of particular extremal types. The main group structures studied in this file are:

**1. Modular Groups (`'Mod_m`)**  
  - Groups of order `m = p^n` (where `p` is a prime, `n ≥ 3`), known as modular groups.
  - Structure: non-abelian, with a unique cyclic maximal subgroup.
  - Mathematical presentation: often realized as a semi-direct product with explicit generators and relations.

**2. Dihedral Groups (`'D_m`)**  
  - Groups of order `m = 2n`, especially for even `m ≥ 4`.
  - For powers of two (`m = 2^n`, `n ≥ 2`), these 2-groups are among the extremal cases.

**3. Generalized Quaternion Groups (`'Q_m`)**  
  - Of order `m = 2^n`, `n ≥ 3`.
  - These are defined as special quotients or coset constructions and admit quaternion-type presentations.

**4. Semidihedral Groups (`'SD_m`)**  
  - Of order `m = 2^n`, `n ≥ 4`.
  - These groups have properties distinct from dihedral and quaternion types and appear in the extremal classification for 2-groups.

Each group type is assigned a principal notation in specific scopes (`%type`, `%g`, `%G`), always tied to a finite group type (finGroupType) in MathComp.

**Auxiliary Definitions and Concepts:**
- *Extremal Generators*: The predicate `extremal_generators G p n (x, y)` identifies pairs of elements in a group `G` that serve as canonical generators, ensuring that `G` has order `p^n`, `x` has order `p^{n-1}`, and `y` lies outside the subgroup generated by `x`. This establishes the link between abstract presentations and concrete group elements.
- *Group Presentations*: Explicit constructions relate the above group types to classical presentations by means of relators (e.g., relations like `x^q = 1`, `y^p = 1`, and `x^y = x^e`, with specified exponents).
- *Group Classifications*: The definition `extremal_class G` classifies a group `G` into one of several classes: ModularGroup, Dihedral, Quaternion, SemiDihedral, or NotExtremal.

Key Theorem Families and Structural Results
===========================================
The file develops cardinality formulas, explicit isomorphisms with classical group-theoretic presentations, and fine-grained structure theorems for each extremal group type. For each class, there are:
- **Cardinality lemmas**: Proofs that the constructed group has the desired order.
- **Generator and presentation lemmas**: Results connecting the constructed types with standard generators and relations.
- **Structure theorems**: Comprehensive results about subgroups (centers, Frattini subgroups, derived subgroups), element orders, maximal subgroups, exponent computations, nilpotency class, and more, parameterized by the type and order of the group.

Moreover, the file includes meta-theorems for groups generated by elements of prescribed orders and relations and develops machinery for recognizing extremal types among arbitrary finite p-groups.

Representation of Mathematical Objects in Coq
=============================================
- *Finite groups* are represented by MathComp’s `finGroupType` and group sets `{group gT}`.
- *Elements* are variables of the carrier `gT` (ultimately finite types).
- *Subgroups and cosets* use MathComp’s `{group gT}` notation with canonical constructions for generated subgroups, cyclic subgroups `<[x]>`, commutators, and group products.
- *Automorphisms and group actions* are managed via the standard MathComp structures (e.g., `Aut G`).
- *Presentations*: Groups presented by generators and relations are encoded using wrapper types (such as `Grp ( ...)`) or as quotients/extensions as appropriate.
- *Parametrization*: Modular and related groups are constructed explicitly as semidirect products `sdprod_by ...` or as cosets, using arithmetic on the underlying orders.
- *Notation*: Special notations (`'Mod_m`, `'D_m`, `'Q_m`, `'SD_m`) are reserved, with overloading in type, group set, and group scope.
- *Classification types*: The classification is captured by an inductive type `extremal_group_type` (with variants ModularGroup, Dihedral, etc.), and equipped with utilities for enumeration and pickling.

Key Notational and Coding Conventions
=====================================
1. **Scopes**: Notations for each group class (`'Mod_m`, `'D_m`, `'Q_m`, `'SD_m`) are defined at three levels:
   - `%type` scope: refers to the group type constructor.
   - `%g` and `%G` scopes: group sets of all elements (full group).
 
2. **Parameter Naming**:
   - *p, n, m, q, r*: Use of `p` for the prime, `n` for the exponent, `m`, `q`, `r` for related group orders and indices, matching conventional group theory notation.
   - *x, y*: Canonical generators.
   - *G, X, Y, My, Mxy*: Group variables and subgroups associated with certain elements or products.

3. **Extremal Generators and Presentations**:
   - The `extremal_generators` predicate encapsulates conditions for canonical generating pairs, used broadly to relate abstract group presentations to explicit group elements.

4. **Parameter Restrictions**:
   - Notations and theorems are only intended to be used when parameters satisfy the required group-theoretic properties (e.g., `'D_m` is extremal only when `m = 2^n ≥ 8`).

5. **Classification Mechanism**:
   - Extends MathComp's type-class infrastructure by defining `extremal_group_type` as a countable type for further algorithmic or proof-theoretic applications.
   - The function `extremal_class` exploits this type for synthetic (case-based) theorems.

6. **Modulo and Arithmetic Notation**:
   - The use of `.−1`, `.−2`, `.+1`, etc., for arithmetic on exponents, matching MathComp conventions for precise index computations.

7. **Section Organization**:
   - Each main group class has a dedicated section for its construction, lemmas, and structure theorems.
   - The culminating `ExtremalTheory` section connects these classes together, provides the main classification theorems, and links abstract properties to explicit group presentations.

Guidance for File Interpretation and Commenting
===============================================
- All central definitions are supplied with clear mathematical interpretations, and parameterized to make theorems as general as possible within the constraints of finite p-group theory.
- Structure theorems are tightly linked to their generating conditions (`extremal_generators`), making it straightforward to identify the role of each variable and assumption in any statement or proof.
- When reading or documenting specific code fragments, recognize the close correspondence between the group-theoretic object (modular/dihedral/quaternion/semi-dihedral) and its representation by generators, relations, and subgroup structure in the Coq code.
- Special attention should be paid to the parameterizations and use of canonical subgroups (e.g., centers, Frattini subgroups) and the role of the classification function in case analyses.
- This file is a reference point for the automatable recognition and decomposition of extremal p-groups based on their order and generation properties, and thus is foundational both for theoretical study and for further computer-assisted proofs about p-groups.

*)
