
(*
==============================================================================
Products of Groups: Internal and External, Their Properties, and Group Morphisms

Overview and Purpose
--------------------
This Coq source file formalizes key constructions and foundational properties relating to group products in the setting of finite groups, as part of the Mathematical Components (MathComp) framework. The main objectives are:

- To define and study *internal* products of subgroups within a given finite group, including partial products, semidirect products, central products, and direct products.
- To characterize *external* products, such as cartesian products of finite groups, and their induced group structures.
- To provide tools for reasoning about the interaction between group products and group morphisms, particularly how various products and their structure are preserved (or mapped) under morphisms and quotients.
- To formalize key algebraic concepts such as complements, splitting of groups, and isomorphisms between product constructions, along with the corresponding reflection lemmas.

The file is intended as a reusable algebraic infrastructure for formal algebra in Coq, supporting later developments in group theory, module theory, and related domains.

Mathematical Structures Represented
-----------------------------------

1. **Finite Groups and Sets**
   - The formalization is carried out over `finGroupType`, MathComp’s canonical type for finite groups.
   - Subgroups are represented as `{group gT}` and subsets as `{set gT}` for a base group type `gT`.

2. **Internal Products**
   - *Partial Product* (`partial_product A B`): The setwise product `A * B`, defined only if `A` is a subgroup normalized by `B`; otherwise, yields the empty set.
   - *Semidirect Product* (`semidirect_product A B` or `A ><| B`): The product `A * B`, when additionally `A` and `B` intersect trivially. This formalizes the classic semidirect product structure as a set.
   - *Central Product* (`central_product A B` or `A \* B`): The product `A * B` when each subgroup centralizes the other.
   - *Direct Product* (`direct_product A B` or `A \x B`): The product `A * B` when `A` and `B` are both central and have trivial intersection, yielding a direct sum of groups.
   - Each of these is formalized as a partial operation on sets or groups within a fixed ambient group.

3. **Complements and Splittings**
   - *Complement to `K` in `G`*: The collection of subgroups `H` such that `K * H = G` with `K ∩ H = 1`, represented by `[complements to K in G]`.
   - *Splitting of `G` over `K`*: Indicates the existence of such a complement; `[splits G, over K]` expresses nonemptiness of the set of complements.

4. **Remainder Functions**
   - *Right Remainder (`remgr A B x`)*: For `x ∈ G`, finds an element of `B` equal to `A` times `x` modulo `B`, serving in decompositions and defining “division” in group-theoretic contexts.
   - *Division (`divgr A B x`)*: Produces the unique representative of `A` in the decomposition of `x` as a product in `A * B`.

5. **External Products**
   - *Direct Products*:
      - *Binary*: The cartesian product `gT1 * gT2` is given a group structure by componentwise operations.
      - *n-ary (Dependent)*: The dependent product over a finite index type, `gT: I -> finGroupType`, forms `{dffun forall i, gT i}` with componentwise group structure.
   - *Injection and Projection Morphisms*: Canonical group morphisms are provided for embedding components and for projecting out factors.

6. **External Semidirect Product**
   - *Semidirect Product by Group Action (`sdprod_by`)*: Given a group action `to : groupAction H K`, an explicit group structure is built on the set of pairs `(a, x)` with a twisted multiplication reflecting the action, yielding a semidirect product as a group.

7. **Morphisms and Product Structures**
   - Construction and analysis of group morphisms extending given morphisms defined on the factors to morphisms on their product, respecting compatibility conditions (commutation, intersection).
   - *Isomorphism results*: Characterizations of when a product of subgroups is isomorphic to a cartesian (external) product, or when morphisms/pushouts yield group isomorphisms.

Key Conventions and Notational Practices
----------------------------------------

- **Notation Overloading and Scopes**
  - Operations are consistently overloaded for group products:
    - `A ><| B` for internal semidirect products, `A \* B` for central products, `A \x B` for direct products.
    - The notation `[complements to K in G]` and `[splits G, over K]` serves for complements and splitting conditions.
  - The `group_scope` is used for related notations and infixes.

- **Implicit Argument Management**
  - Frequent use of `[Set] Implicit Arguments` and Coq's canonical structures to manage type inference for group parameters.

- **Product Construction Conventions**
  - Internal products are always partial: if the algebraic requirements (trivial intersection, commutation, normalization) are not satisfied, the product is defined as the empty set.
  - Direct products (external or internal) are always up to isomorphism with the cartesian product; all group-theoretic identities and isomorphisms are formalized explicitly.

- **Reflection Lemmas**
   - Many propositions about products and complements are paired with reflection lemmas, mapping between propositional and boolean statements, useful for automation and rewriting.

- **Morphism Extending Conventions**
  - Group morphisms on products are constructed by combining morphisms on the component groups, with precise control over compatibility (e.g., action morphisms or agreement on intersections).
  - Where possible, injections, projections, and section maps are equipped with canonical morphism instances, enabling seamless use with MathComp’s morphism infrastructure.

- **Big Operators**
   - “Big” versions of product constructions (`\big[...]`) are defined for families of subgroups, with reflection and uniqueness lemmas aligning set-theoretic and algebraic perspectives.

- **Automated Derivation and Canonical Structures**
   - Canonical instances and HB (Hierarchy Builder) machinery are used extensively so that standard algebraic identities, associativity, commutativity, and monoid/group structure are available by type inference.

- **Sectioning**
   - The code is organized into sections by theme — first handling internal product definitions; then external products; then properties about morphisms and isomorphisms; and finally, constructions such as external semidirect products.

Context for Code Retrieval and Comments
---------------------------------------
This file provides a central, self-contained algebraic toolbox for formal manipulations of group products, morphisms, and related isomorphisms, targeting finite group theory in a type-theoretic setting. 

- **High-Level View:** 
  - When a code chunk defines an operator or a set (e.g., `partial_product`, `semidirect_product`), it is always synthesizing an algebraically meaningful subgroup of an ambient group where certain structural constraints are checked. If the definition does not meet the group-theoretic constraints, the result is an empty set.
  - Whenever a morphism or isomorphism is constructed, there is an accompanying set of hypotheses ensuring that group operations, normality, commutation, or action-compatibility are met.
  - Reflection lemmas (with `reflect` or boolean equations) are included to bridge between constructive proofs and classical algebraic statements, facilitating rewriting and automation.

- **Comment Generation Guidance:** 
  - For any function or lemma, a comment should specify (1) which product or morphism structure it refers to, (2) which algebraic side-conditions are involved (normality, centrality, action compatibility), (3) how these relate to the broader theory of group products or complements, and (4) the expected algebraic property, isomorphism, or computation the definition or lemma delivers.

- **Reusability:** 
  - The file serves as a foundational module for subsequent developments in algebra, representation theory, and module theory, making these conventions and structures broadly applicable.

In summary, this source file offers a rigorous, type-theoretic formalization and API for constructing, analyzing, and manipulating direct, central, and semidirect products of finite groups, with precise control over group-theoretic side conditions and their interaction with group morphisms and isomorphisms, supporting automation and robust formal reasoning in algebra.
*)
