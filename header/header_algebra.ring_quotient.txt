
Quotients of Algebraic Structures and Ideals in Rings

Overview
========

This file formalizes a general framework for constructing and reasoning about quotient algebraic structures in the Coq proof assistant, specifically within the context of the Mathematical Components (MathComp) library. Its primary focus is twofold: 
1. To systematically define *quotient structures* (such as modules and rings) in terms of user-provided parameter data describing abstract underlying operations and equivalence relations, while imposing compatibility conditions.
2. To rigorously formalize the notion of (right) ideals and prime ideals in (possibly non-commutative) rings, culminating in the construction of the quotient ring with its underlying algebraic operations.

Mathematical Objects and Their Representations
==============================================

**1. Quotient Structures**

The file enables the construction of algebraic structures as quotients of types equipped with parameterized operations and an equivalence relation. These structures include:

- **Quotient Z-modules (`zmodQuotType`)**: 
  Constructed by quotienting a base type `T` by a relation `e`, and projecting the zero element, additive inverse, and addition operation (encoded as the parameters `z`, `n`, `a`, respectively) to the quotient. The file ensures that the equivalence relation and the operations are compatible so that the quotient inherits a Z-module structure.
  
- **Quotient Non-trivial Rings (`nzRingQuotType`)**:
  Extends the above by including multiplicative structure: that is, projecting zero, additive inverse, addition, one, and multiplication (parameters `z`, `n`, `a`, `o`, `m`) to form a non-trivial quotient ring. Again, compatibility with the equivalence is enforced.
  
- **Quotient Unit Rings (`unitRingQuotType`)**: 
  Further extends to unit rings by projecting additionally a unit predicate `u` and an inverse operation `i`, providing canonical structures for the unit element and its inverse in the quotient. 

These quotients are constructed without requiring the base type `T` itself to carry any algebraic structure, other than supplying the operations as parameters. The surjection from `T` to its quotient must respect (intertwine) the operations and the equivalence relation.

**2. Ideals in Rings**

The second major theme formalizes (right) ideals and prime ideals in the context of (possibly non-commutative) rings:

- **(Non-trivial, decidable, right) Ideals (`idealr`)**: 
  Ideals are represented as predicates (`S : pred R`) over a ring `R`, required to contain `0`, not contain `1`, and be stable under the appropriate closure properties (closed under addition and right multiplication). The file structures these as collective predicates, leveraging the MathComp convention of using sets-as-predicates.
  
- **Proper Ideals (`proper_ideal`)**:
  Ideals that do not contain the multiplicative identity element, again internally modeled as predicates.
  
- **Prime Ideals (`prime_idealr`)**:
  Ideals satisfying, in addition to the above, the standard prime property: `u * v ∈ I` implies `u ∈ I` or `v ∈ I`. This is only canonically provided for commutative rings.
  
- **Ring Quotients by Ideals**:
  For any (commutative) ring `R` and right ideal (predicate) `I`, the file constructs the quotient ring `{ideal_quot I}`. The elements of this type are equivalence classes of ring elements modulo the ideal, and the induced ring operations are defined via lifted versions of addition and multiplication. Canonical MathComp structures witness that `{ideal_quot I}` forms a (commutative, non-trivial) ring, and, for prime ideals in commutative rings, the quotient is an integral domain.

Key Coding and Notational Conventions
=====================================

- **Parameterization Over Data**:
  Rather than assuming a type has operations built-in, these structures are parameterized over the operations to be used, as well as the equivalence relation used for the quotient.

- **Canonical Structures and Hierarchy**:
  The file uses [HB] (Hierarchy Builder) to systematically create instance-building records and classes, enabling inference of structure in downstream developments.

- **Use of Predicate-based Sets**:
  Ideals and related subset structures are represented by predicates or sets-as-predicates, e.g., `S : pred R` corresponds to a subset of `R`.

- **Reserved Notations**:
  Several notations are reserved for quotient and modular arithmetic, such as `{ideal_quot I}` for the quotient ring, and `x == y %[mod_ideal I]` for equality modulo the ideal `I`. These notations integrate into MathComp's 'quotient_scope', allowing context-aware parsing and pretty-printing.

- **Quotient Operations via Lifting**:
  Operations on quotient types (e.g., ring and module operations) are systematically defined using `lift_op*` and `lift_cst` constructions, which build quotient-level operations corresponding to base-level ones.

- **Compatibility and Morphism Lemmas**:
  Each quotient structure records and proves "projection" morphism lemmas (e.g., that the image of addition is addition in the quotient), ensuring the operations are well-defined on equivalence classes.

- **Collective vs. Pointwise Properties**:
  Ideals and prime ideals are characterized both via closure properties on predicates and through bundled mixin and structure records recording properties such as additivity, properness, and primeness.

- **Support for Commutative and Noncommutative Rings**:
  Although the "quotient by an ideal" construction is general, canonical ring quotient structures are only supplied for commutative rings. Right ideals (as opposed to left or two-sided) are the primary focus, simplifying the compatibility arguments.

- **Organizational Conventions**:
  Each main construction (quotient structures, ideal structures, quotient rings) is given both a mixin/record style (for specifying structure) and a structure type (for use with MathComp's canonical structure inference). Auxiliary lemmas provide connections between definitions and establish the foundational algebraic properties inherited by the quotients.

Summary
=======

In summary, this file provides foundational infrastructure for algebraic quotients and ideal theory in formalized mathematics. It is designed to smoothly interoperate with MathComp's canonical structure mechanism, supports compositional reasoning about quotients and subobjects, and supplies key idioms and notations for downstream developments involving modular arithmetic, ideal-theoretic reasoning, and quotient algebraic structures. The conventions adopted ensure modularity and reusability, while precisely encoding the dependencies and algebraic axioms required for each construction.
