
(*
===============================================================================
Finite Dimensional Free Algebras ("F-algebras") and Their Subalgebras

Overview and Purpose
--------------------
This file develops the formal theory of finite-dimensional free algebras (commonly called "F-algebras") over a (commutative) field or ring, within the Coq proof assistant using the Mathematical Components (MathComp) library. The main objective is to define the structure, basic operations, and theory of F-algebras and their subalgebras, providing canonical constructions and results for linear algebra, representation theory, and algebraic geometry contexts.

The code introduces:
  - A rigorous Coq representation of F-algebras: finite-dimensional unitary (i.e., with identity) associative algebras that are also vector spaces over a given (commutative or non-commutative) ring or field.
  - The type of (linear) subspaces and specially the subalgebras—the subspaces closed under the algebra multiplication and containing a unit element.
  - Central algebraic operations such as subalgebra generation, algebra homomorphisms, centers and centralizers, and properties of dimension and bases.
  - Tools to reason about the structure and properties of F-algebras, and to canonically endow their subalgebras with F-algebra structures.

Mathematical Foundations and Main Objects
-----------------------------------------

1. **F-algebra type (`falgType K`)**
   - The central interface type for F-algebras over a ring or field `K`.
   - Formally, an F-algebra is modeled as a type `A` with:
     - A vector space structure over `K` (`Vector K A`)
     - An associative ring structure with a unit element (`UnitAlgebra K A`)
     - *NZRingType* (`nzRingType`): the base additive group is non-trivial (non-zero ring).

2. **Subspaces and Subalgebras**
   - `{vspace aT}`: The type of all vector subspaces of the F-algebra `aT`.
   - `{aspace aT}`: The subtype of `{vspace aT}` consisting of _subalgebras_, i.e., subspaces closed under multiplication and containing a unit element (not necessarily the F-algebra's global unit).
   - Membership, intersection, sum, span, and product of subspaces are defined and equipped with canonical operations.

3. **Subalgebra Properties and Structure**
   - *Product of subspaces (`prodv`):* Given subspaces `U` and `V`, their product `U * V` is the span of all products `u * v` with `u ∈ U, v ∈ V`.
   - *Powers (`U ^+ n`):* The iterated subspace product—a subalgebra generated by multiplying `U` with itself `n` times.
   - *Subalgebra generation (`agenv U`):* The smallest subalgebra containing a subspace `U`, constructed as the sum of all powers of `U` up to the ambient dimension.
   - *Adjoining elements/sequences*: `<<U; x>>` adjoins an element `x` to subspace `U`, and `<<U & xs>>` adjoins a sequence of elements.

4. **Centralizers and Centers**
   - *Centralizer of an element (`'C[u]`), of a subspace (`'C(V)`):* The set of elements commuting with a given element or all elements of a subspace.
   - *Center of a subspace (`'Z(V)`):* The set of elements in a subspace `V` commuting with all its elements.
   - These are realized as special subalgebras with canonical structure.

5. **Algebra Homomorphisms**
   - `ahom_in U f`: Predicate expressing that a linear map `f` is a multiplicative and unital algebra homomorphism on subspace `U`.
   - Structures `'AHom(aT, rT)` and `'AEnd(aT)` for (endo)morphisms between (within) algebras, supporting composition and identity.

6. **Subalgebra Units and Identity Element**
   - Each subalgebra (`{aspace aT}`) is associated with a unit (identity) element `algid A`, which need not equal the ambient algebra's unit.
   - Predicates and constructions are provided to decide and extract these units.

7. **Subalgebra as F-algebra**
   - The type `subvs_of A`, for `A : {aspace aT}`, instantiates the F-algebra structure naturally on a subalgebra.

Key Notations and Coding Conventions
------------------------------------

- **Scopes**: Carefully managed mathematical scopes distinguish rings, vector spaces, and algebra structures:
    - `ring_scope`, `vspace_scope`, `aspace_scope`, `lrfun_scope` (linear/ring functions)
- **Explicit Notation**:
    - `1%VS` : The subspace generated by the global unit of `aT`
    - `(U * V)%VS` : Product of subspaces U and V
    - `(U ^+ n)%VS` : n-fold subspace product of U
    - `'C[u]%VS` : Centralizer (subspace) of `u`
    - `'C(V)%VS` : Centralizer of subspace V
    - `'Z(V)%VS` : Center of V
    - `<<U; x>>%VS`, `<<U & xs>>%VS` : Subalgebra generated by adjoining elements
    - `{aspace aT}` : The type of subalgebras of `aT`
    - `algid(A)` : The unit (possibly non-global) of the subalgebra A
    - `'AHom(aT, rT)`, `'AEnd(aT)` : The type of (endo)morphisms of algebras

- **Canonical Structures**:
    - All instances are declared using Canonical and HB (Hierarchy Builder) mechanisms, ensuring that algebraic, module, and morphism structures compose automatically.
    - New structures inherit operations and properties unless explicitly overridden.

- **Decidability and Reflection**:
    - Key properties such as the existence of a unit in a subspace, being a subalgebra, and centralizer relationships are all rendered as Booleans with reflection lemmas, enabling straightforward automation.

- **Dimension Handling**:
    - The file consistently deals with finite-dimensional subspaces. The function `\dim V` returns the (natural number) dimension of a subspace.
    - For submodules, the dimension is sometimes normalized by dividing by the dimension of an algebra.

- **Product and Power Operators**:
    - The notation `(U * V)` denotes the subspace generated by all products of elements, and `(U ^+ n)` denotes the result of repeated multiplications, interpreted as an iterated span, not simple set exponentiation.

- **Algebra Homomorphisms**:
    - Homomorphisms are modeled as structure-preserving linear maps; see `'AHom(aT, rT)`.
    - Endomorphisms (`'AEnd(aT)`) form an F-algebra under composition, not pointwise multiplication, unless specified.

- **Automation and Injection**:
    - Many lemmas, e.g., injectivity of certain maps or properties of dimension, are provided with strong reflection properties to facilitate proof automation.

Summary for Implementers and Commenters
---------------------------------------
Readers and contributors should recognize that this file establishes the foundational machinery for working with finite-dimensional associative algebras and their subalgebras in a formal, type-safe manner. Subcomponents like centralizers, centers, and morphisms are all modeled as concrete types with rich structure. This foundational layer is intentionally highly abstract yet tightly coupled to the underlying module/ring machinery of MathComp, and borrows notations and design patterns from mainstream algebra, but with precise Coq types and explicit, proof-carrying properties.

When interpreting or documenting particular code chunks, always:
  - Identify the mathematical structure being formalized (e.g., is it a property of a subalgebra? an operation on morphisms?).
  - Take note of the scope and notational conventions active (e.g., does `*` mean algebra product or composition?).
  - Consider whether properties are modeled as Boolean predicates with reflections, or as explicit Σ-types (dependent pairs).
  - Explicitly mention the connections to vector space, ring, and algebra structures—almost all structures are "over" a base field or ring `K`, and benefit from canonical inheritance.

*)
