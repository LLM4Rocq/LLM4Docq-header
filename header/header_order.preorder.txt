
*******************************************************************************

Order Structures and Formalization of Preorders in Coq

Overview and Purpose
====================

This source file establishes a comprehensive infrastructure in the Coq proof assistant for handling types equipped with order relations, notably preorders (reflexive and transitive binary relations) and their extensions, such as those with top and bottom elements, finite instances, and duals. It provides a versatile and extensible abstraction layer to represent and reason about order-theoretic structures on a broad array of types, including natural numbers, ordinals, booleans, products, tuples, sequences, and sets. The module forms a foundational part of the Mathematical Components (MathComp) library, supporting formal proofs in algebra, combinatorics, discrete mathematics, and computer science.

By offering a hierarchy of interfaces, notations, and canonical structures, the file enables users to write generic, reusable code and proofs about ordered types. It supports both total and partial orders and allows types to have multiple meaningful orders (e.g., natural numbers ordered by ≤ and by divisibility), with fine control over inference and notation disambiguation via the concept of "displays".

Mathematical Scope and Representations
======================================

1. **Core Ordered Structures**:
   - **Preorders (`preorderType`)**: Types equipped with a reflexive and transitive "less-than-or-equal-to" (`le`) relation, written generically as `T`. Preorders may be partial or total.
   - **Bottom/Top Elements (`bPreorderType`, `tPreorderType`, `tbPreorderType`)**: Enhancements of preorders with least (`\bot`) and/or greatest (`\top`) elements. The presence of such elements is captured in respective interfaces.
   - **Finite Preorders (`finPreorderType` and variants)**: Preorders on finite types, supporting enumeration and counting arguments.

2. **Morphisms and Substructures**:
   - **Order Morphisms (`OrderMorphism`)**: Functions between ordered types that preserve the preorder (i.e., are monotonic/nondecreasing).
   - **Subpreorders (`subPreorder`)**: Subtypes of preordered types equipped with the induced (pointwise) order, where the inclusion map is monotonic.

3. **Dual Orders**:
   - For any preorder, a formal *dual* can be built, reversing the direction of the order. This is represented by an alias `dual T` or `T^d`, with associated dual notations (such as `<=^d`, `<^d`, etc.), and a corresponding "dual display".

4. **Product and Lexicographic Orders**:
   - **Product Order** (`prod_display`, `T *prod[d] T'`): The component-wise order on products, i.e., `(x1, x2) ≤ (y1, y2)` iff `x1 ≤ y1` and `x2 ≤ y2`.
   - **Lexicographic Order** (`lexi_display`, `T *lexi[d] T'`): The lex order, where the first components are compared, and the second only if the first are equal.

5. **Sequences, Tuples, and Sets**:
   - **Sequence Product Order (`seqprod_with`)**: Pointwise extension of the product order to lists—two sequences are compared elementwise.
   - **Sequence Lexicographic Order (`seqlexi_with`)**: Lexicographic extension to sequences (lists or tuples).
   - **Tuples (`n.-tupleprod`, `n.-tuplelexi`)**: Fixed-length sequences with product or lexicographic order.
   - **Sets (`{subset[d] T}`)**: Finite sets ordered by inclusion (subset relation).

6. **Natural Numbers and Booleans**:
   - **Natural Numbers**: Multiple orderings are instantiated:
     - Usual numeric order (`≤`, `minn`, `maxn`)
     - Divisibility order (`%|`, `%<|`, `gcd`, `lcm`) via an alias `natdvd`
   - **Booleans**: Trivial order (false < true), with corresponding structure.

7. **Enumerations and Extreme Elements**:
   - For finite ordered types, provide means to enumerate elements in order (`enum`, `enum_val`, `enum_rank`, etc.).
   - **Extremum operations**: Arguments like `[arg min_(i < i0 | P) M]` yield an element minimizing (or maximizing) a function under a predicate.

Key Conventions and Notational Mechanisms
=========================================

**Displays and Notation Disambiguation**:
- *Displays* (`disp_t`) are parameters used to control how notations are parsed and printed, allowing the same Coq type to be associated with distinct orders and notations. For example, one may talk about the usual order or the divisibility order on `nat`, depending on the display.
- Displays do *not* influence instance inference—only the base type or its alias does. To trigger inference for a non-default order, one must use the appropriate *alias* (e.g., casting natural numbers to `natdvd` to use divisibility order). Notation printing is then controlled by the display.
- New displays can be defined as opaque constants, aliased to structures via canonical instances, and linked to custom notations.

**Notation Hierarchy**:
- Notations for order relations and operations are defined in the delimited `order_scope` (using key `"O"`), with auxiliary notations available in `function_scope` (for unary, curried, or higher-order forms).
- Standard symbols:
  - `x <= y`, `x < y`, `x >=< y`, `x >< y`: Usual relations (less-than-or-equal, less than, comparable, incomparable).
  - `>= y`, `<= y`, `> y`, `< y`: Sections (curried forms, e.g., "all elements less than y").
  - `x <= y <= z`, `x < y < z`, etc.: Chained comparisons.
  - Dual, product, and lexicographic orders use notations like `<=^d`, `<=^p`, `<=^l`, `<=^sp`, `<=^sl`, etc., with similar conventions.
- Notations for min/max and their function analogs: `min`, `max`, `f \min g`, `f \max g`.

**Order-aware Operations**:
- Definitions and notations for concepts such as minimum, maximum, monotonicity (`nondecreasing`), comparability, and extremum selection are all parameterized over the appropriate display and type.
- Extrema are expressed as `[arg min_ ...]` / `[arg max_ ...]` supporting bounded quantification, predicates, and projections.

**Morphisms and Functoriality**:
- Morphisms (`order_morphism`) are formalized as structures ensuring monotonicity, enabling functorial constructions and composition.

**Instance Declarations and Aliases**:
- Canonical instances for preorders and their extensions are established for practically all MathComp datatypes (nat, bool, ordinals, products, sequences, tuples, sets, etc.), enabling automatic reuse of general results in concrete settings.
- For most structures, both the direct definition and expected notational aliases (e.g., `natdvd`, `dual T`, `T *prod[d] T'`) are provided.

Organization, Factories, and Patterns
=====================================

- The file is organized around the HB (Hierarchical Builder) mechanism, which provides a systematic way to define and compose algebraic structures and their mixins in a type-safe way, supporting canonical structures, factories (for building instances from various starting hypotheses), and builders (for composing mixins).
- For each interface (e.g., preorder, bPreorder, subPreorder, etc.), mixins, builders, and factories are provided, along with patterns for building new structures and (optionally) coercing between related types.
- Patterns for rewriting, such as `leLHS` and `leRHS`, are defined to support contextual rewriting in proofs.
- Comprehensive sections gather results about the theory (lemmas, monotonicity, enumeration, etc.), syntax (notation), and export them to the global scope as appropriate.

Summary: Interpretation Guidance
===============================

This file provides a highly generic and extensible foundation for reasoning about ordered structures in Coq. Keep in mind:
- **Types and Relations**: Preorder structures are always explicitly parameterized by a "display" to enable multiple, parallel order structures on the same Coq carrier type.
- **Notation**: Disambiguation is handled via displays, with specialized notations for dual, product, sequence, and lexicographic orders.
- **Interfaces and Hierarchies**: A rich hierarchy interrelates preorders, orders with extremal elements, finite orders, suborders, morphisms, and more.
- **Instantiation and Extension**: Canonical instances for all major MathComp types are provided, and the file is structured to make extension to new data types and new orders straightforward.
- **Automation**: The system is designed for both convenient informal reasoning (through rich notation and type inference) and for robust, low-level formalization and proof development.

A reader analyzing specific code chunks in this file should look for:
- The order-theoretic structure being implemented (e.g., a specific instance of a preorder, definition of an order morphism, an alias or display).
- The conventions regarding notations, scope opening, and display usage in that context.
- The intention behind structure factory/building code, which is to support flexible, modular construction of new instances.

*******************************************************************************
