
Binomial Coefficients, Falling Factorials, and Their Combinatorics in MathComp

Overview
========
This file is part of the Mathematical Components (MathComp) library for the Coq proof assistant and develops the basic theory of binomial coefficients, falling factorials, and related combinatorial identities over the natural numbers. Its main objective is to formally define these objects, establish their fundamental algebraic and arithmetic properties, and connect them to classic theorems from number theory and combinatorics. The file also provides combinatorial characterizations and counting results for various finite sets, serving as a corpus of usable facts for further developments in discrete mathematics and formalized combinatorics.

Mathematical Objects and Representations
========================================
**1. Natural Numbers (`nat`):**  
All objects are defined over the standard type of natural numbers in Coq, using the Peano constructors `O` and `S` (interpreted in Ssreflect as 0 and `n.+1`). Arithmetic on `nat` is assumed, with notations and operations as provided by MathComp.

**2. Factorials (`n`!):**  
Factorials are realized as the product of all positive integers up to `n`. In Coq, `n`! is denoted as `n\`!` and is defined recursively and via products over intervals:
- `fact_prod n : n! = \prod_(1 <= i < n+1) i`  
  (Here `\prod_` denotes big product and the interval notation follows MathComp conventions.)

**3. Falling (Lower) Factorials (`n ^_ m`):**  
The falling factorial (also known as the "lower factorial") represents the product `n * (n - 1) * ... * (n - m + 1)`, or zero when `m > n`. It is implemented via the recursive function `falling_factorial n m`, with the notation `n ^_ m`. Lemmas relate it to the standard factorial (e.g., `n ^_ n = n!`), to products, and to its vanishing properties.

**4. Binomial Coefficient (`'C(n, m)`):**  
Defined recursively in the file by `binomial n m`, the binomial coefficient corresponds to the number of ways to choose `m` objects from a collection of `n`. It admits the conventional notational form `'C(n, m)`. Properties such as Pascal’s rule, symmetry, boundary values, closed formulas, and its connection to factorials and falling factorials are proven.

**5. Classical Number-Theoretic Results:**  
A series of theorems establish important properties of factorials and binomial coefficients, such as:
- Wilson's theorem about (`p-1`)! modulo a prime `p`
- The formula for the exponent of a prime `p` in `n!`
- Divisibility properties and the prime-divisor content of binomials

**6. Polynomial Expansions:**  
The binomial theorem is formalized (`expnDn`), expressing the expansion of `(a + b)^n` in terms of binomial coefficients and powers. Vandermonde's convolution—a summation identity involving binomial coefficients—is also included.

**7. Combinatorial Counting with Finite Types:**  
A significant feature is the enumeration of combinatorial structures over types with finite support (`finType`). The file proves that:
- The number of injective functions from a finite type `D` to a finite set `T` is a falling factorial.
- The number of subsets of a given size corresponds to a binomial coefficient.
- The number of sorted tuples or partitions, subject to constraints, matches binomial coefficient formulas.

Key Conventions and Notations
=============================
- **Big Operators:**  
  Expressions like `\prod_`, `\sum_` are used for products and sums over ranges or sets, with indices expressed Ssreflect-style (e.g., `i < n`, `a <= i < b`).
  
- **Notation and Scope:**
  + `n ^_ m` for falling factorials is defined at precedence 30 with right associativity.
  + `'C(n, m)` always denotes the binomial coefficient for `n` and `m`.
  + The arithmetic and combinatorial universe is the natural numbers (`nat`) with MathComp’s `nat_scope` and associated notations.
  
- **Finite Types and Cardinalities:**
  + `finType` is the MathComp class of finite types.
  + `#|A|` is the cardinality (size) of a finite set or family.
  + `{set T}` denotes finite sets over type `T`.
  + `{ffun D -> T}` denotes functions between finite types, with `injectiveb f` a Boolean injectivity predicate.
  + `m.-tuple T` denotes tuples of length `m` on `T`.

- **Boolean Reflective Predicates:**  
  Many results use Boolean-valued arithmetic predicates (`(m == n)`, Boolean inequalities, etc.), reflecting them to their propositional counterparts for use in proofs.

- **Proof Style:**  
  The file leverages the small-scale reflection methodology characteristic of the Ssreflect/MathComp ecosystem, favoring explicit computational definitions and equational reasoning.

- **Deprecations:**  
  Certain identifiers and notations are marked deprecated (usually replaced by more standard or descriptive names in newer versions of the library).

Contextual Guidance for Interpretation and Documentation
=======================================================
Readers and tool-assisted systems (including language models) should recognize that:
- This file systematically develops both the definitions and a broad set of lemmas/theorems for binomial/falling factorial functions, integrating both their arithmetic/algebraic and combinatorial facets.
- All objects are primitive in the sense of being given by explicit natural-number recursive definitions and computed inductively.
- The presentation aims to make the bridging between combinatorial counting and algebraic expressions (e.g., which counting problem is solved by which formula) explicit and formalized.
- Notational conventions are consistent with mathematical literature: the binomial coefficient `'C(n, m)` and falling factorial `n ^_ m`, with commutative diagrams between various characterizations (recursive, factorial-based, combinatorial).
- Counting results in the second half of the file are crucial for relating algebraic definitions to the cardinalities of types that are naturally expressible in Coq’s finite type infrastructure.

Summary
=======
In summary, this file is a foundational component for all formal, algebraic, and combinatorial reasoning about binomial coefficients and falling factorials in Coq’s MathComp library. It encodes both discrete analytic formulas and their combinatorial interpretations, with a precise, computational, and algebraic approach amenable to formal manipulation and proof automation. This enables robust reasoning about combinatorial identities, enumerative formulas, and their number-theoretic content entirely within Coq’s foundational framework.
