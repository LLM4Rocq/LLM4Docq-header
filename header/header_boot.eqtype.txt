
Equality Types and Subtypes in MathComp

Overview
========
This Coq source file provides the foundational formalization of types equipped with decidable equality, called "equality types" (`eqType`), and of subtypes satisfying logical predicates (`subType`), in the Mathematical Components (MathComp) framework. It supplies the basic classes, canonical structures, and notations necessary to work uniformly with types for which elementwise equality can be computed, as well as their predicative subtypes. The also file details the interface and supporting infrastructure for reasoning about these structures inside Coq, with a heavy emphasis on compatibility with boolean reflection and the small-scale reflection (Ssreflect) proof style.

The primary aims of the file are:
- To axiomatize the notion of a type with decidable, proof-irrelevant equality (eqType) and to provide canonical instances for standard datatypes like `bool`, `unit`, products, sums, options, and dependent pairs.
- To establish a systematic and extensible theory of subtypes (types isomorphic to `{x : T | P x}` for some predicate `P`) with essential operations, constructors, and projections.
- To develop notational and interface conventions for equality testing, reflected predicates, injective images, and combinatorial subtype manipulations.

Mathematical and Formal Objects
==============================
1. Types with Decidable Equality (`eqType`)
--------------------------------------------
- An `eqType` is a type equipped with an equality operation that provides a boolean test for equality of any two elements. In Coq, an eqType is formally a type `T` together with a boolean-valued binary relation `eq_op : rel T` and a proof (axiom) that `eq_op` accurately reflects Leibniz equality (i.e., `(eq_op x y)` is `true` if and only if `x = y`).
- The equality operation is required to be proof-irrelevant: any two proofs of `x = y` are equal (uniqueness of identity proofs), which is important for setoid reasoning based on boolean equality.
- The main method for equality testing is `x == y`, a boolean-valued operation, with `x != y` its negation.

2. Subtypes (`subType`) and SubEquality Types (`subEqType`)
-----------------------------------------------------------
- A `subType P` is a type isomorphic to the set `{x : T | P x}` for some predicate `P` over a type `T`, i.e., the set of elements of `T` satisfying `P`. Subtypes are equipped with canonical projection (`val`) and injection (`Sub`) functions, as well as decision procedures for membership and coercions for interaction with the base type.
- A `subEqType` combines both the equality type and subtype structures, furnishing the subtype with the decidable equality inherited from its carrier type.
- The file provides generic constructions, projection/section lemmas (e.g., injectivity, surjectivity of `val` and `Sub`), and support for option-based partial injection (`insub`) as well as defaulted injection (`insubd`, `innew`), enabling partial casts from the base type.

3. Canonical Equality Structures for Standard Types
---------------------------------------------------
- Instances of eqType are constructed for standard types: `bool`, `unit`, disjoint union (`sum`), product types, option types, dependent pairs (sigma types), and subtypes. These are provided with their corresponding equality operations and proofs, making them first-class citizens in MathComp's equality theory.

4. Reflected Equality and Predicate Infrastructure
--------------------------------------------------
- Boolean equality predicates such as `pred1`, `pred2`, ..., `pred4`, and their combinatorial versions (`predC1`, `predU1`, `predD1`) are defined, tightly integrating set-like operations (membership, union, complement, difference) with decidable equality. These are supported by reflection lemmas for switching between boolean and propositional reasoning.
- "Tagged" and "sigma" types are supported with generic tools (`tagged_as`, `etagged`, `tag_with`, `untag_with`) for handling families of types indexed by another eqType.

5. Transfer, Injection, and Function Equality
---------------------------------------------
- The file formalizes how to equip a type with an equality structure by transfer along an injective or (partial) canceling function to an existing eqType (`inj_type`, `pcan_type`, `can_type`).
- It develops lemmas ensuring equality is preserved under injective, canceling, and involutive function images.

6. Advanced Operations and Utilities
------------------------------------
- Generic function update mechanisms (`fwith`, `dfwith`) are provided, enabling the definition of functions differing from a default by finitely many assignments, a common combinatorial construction.
- The file supports predicates on products, tagged types, and provides tools for constructing and reasoning about subtypes via notational templates for canonical structures.
- Miscellaneous lemmas are established for contrapositive reasoning, handling options and sum types, combining relations (for monotonic and homomorphic functions), and providing interface glue for inherited equality.

Key Notational and Coding Conventions
=====================================
- **Notational scopes:**
  - `eq_scope` is the scope for reflected equality and its associated notations.
  - `fun_delta_scope` is the scope for finite function update expressions.
- **Equality notations:**
  - `x == y` denotes the boolean equality test, with `x != y` its negation.
  - `x =P y` denotes a reflection lemma (`reflect (x = y) (x == y)`)—bridging boolean and propositional equality.
  - `eqbLHS`, `eqbRHS` are pattern variables for rewriting boolean equalities.
- **Subtype conventions:**
  - `val` projects from the subtype to the base type.
  - `Sub x Px` injects `x` into its subtype, provided `P x`.
  - `insub x` attempts to cast `x` into the subtype, returning an option type.
  - `{? x | P}` denotes an option for the subtype.
  - Specialized notations (`[isSub ...]`, `[isNew ...]`) facilitate the creation of subtypes and their canonical structures.
- **Boolean predicates and reflection:**
  - Predicates `pred1`, `pred2`, … define membership in singleton, binary, ternary, or quaternary sets.
  - `SimplPred` is used to wrap such functions to fit into the MathComp predicate infrastructure, which supports uniform manipulations and set operations.
- **Canonical structure patterns:**
  - Canonical instances are systematically declared to provide unification over candidate types for equality typeclass resolution, supporting extensibility and avoiding duplication for new user-defined types.
  - Transfer/alias patterns (e.g., `inj_type`, `can_type`) allow extension of eqType to function images.

- **Proof irrelevance and consistency:**
  - The eqType interface is built to guarantee proof irrelevance of equality—two proofs of `x = y` are always equal—ensuring consistent use of equality in the combinatorial libraries.

- **Naming conventions:**
  - Functions, constructors, and lemmas follow MathComp's concise and regular style: e.g., `eq_refl`, `eq_sym` for equality facts, `predU1`, `predD1` for unary and binary set predicates.

Interpretation and Usage Context
===============================
Understanding this file is crucial for anyone working with the Mathematical Components library or any Coq development needing a robust, extensible, and uniform way to reason about equality in types, including more complex mathematical structures built atop these base constructions. The mechanisms for subtypes, typeclass inheritance, and reflective equality are heavily reused throughout MathComp's combinatorics, algebra, and beyond.

When reading or documenting specific code chunks from this file, the following principles are essential:
- Equality is about computable, proof-irrelevant comparison, connected to Coq's own notion of equality through boolean reflection.
- Subtypes are always accessed and constructed through their `val` and `Sub` functions, respecting the encapsulation offered by the structure.
- All notations and building patterns are designed to keep code short, regular, and algebraically meaningful, supporting both algorithmic computation and proof reflection.
- The class and instance mechanism (via HB and canonical structures) is the backbone for extensibility, so all interfaces and notation extend naturally to user-defined types as long as the required operations and axioms are provided.

This file, and its conventions, form the basis for uniform, computable, and setoid-like equality reasoning across the broad landscape of mathematical and combinatorial objects formalized in the MathComp ecosystem.
