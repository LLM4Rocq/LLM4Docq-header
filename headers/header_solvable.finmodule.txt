
Finite Abelian Groups as Modules and Transfer: 
Foundations and Constructions for Representation-Theoretic and Coprime Action Results

========================================================================================

Purpose and Goal
----------------

This Coq source file develops the foundational infrastructure necessary to formalize a range of classical results in the representation theory of finite groups, focusing on the simplest case: finite abelian groups viewed as additive modules over the integers. Its overarching goal is twofold:

1. To encode finite abelian groups as finite ℤ-modules so that further group-theoretic machinery (e.g., transfer and splitting theorems) can be precisely and efficiently developed on top of this structure.
   
2. To encapsulate several fundamental constructions and theorems in group theory, notably Gaschütz’s splitting and transitivity results, the coprime abelian centralizer/commutator trivial intersection theorem, and the definition and computation of the transfer homomorphism (including its expansion over coset cycles).

All of these results build a bridge between group structure and module structure and are essential ingredients for further developments, such as the proof of the Schur-Zassenhaus theorem and the focal subgroup theorem.

Mathematical Objects and Their Representations
---------------------------------------------

The file manipulates and relates a variety of core algebraic structures. The most important are:

### 1. Finite Abelian Groups

- *Definition*: A finite group $A$ (represented as `{group gT}` for some type `gT` with group operations) equipped with a proof that it is abelian (`abelian A`).
- *Representation in Coq*: Elements of the group are terms of type `gT` such that `x \in A`.

### 2. Finite ℤ-Modules Induced by Abelian Groups (Module `FiniteModule`)

- *Motivation*: Any finite abelian group $A$ can be turned into a finite ℤ-module via its additive structure.
- *Type*: `FiniteModule.fmod_of abelA`, where `abelA : abelian A`.
    - *Elements*: Constructed as `Fmod x Ax` where `x : gT` and `Ax : x \in A`. This packaging encodes an element of $A$ as a module element.
    - *Injection*: `fmod abelA x` maps $x$ (if $x \in A$) into the module. If not, it returns $0$.
    - *Projection*: `fmval u` projects a module element $u$ back into the group $A$.
    - *Addition and Negation*: The module structure is defined so that addition corresponds to group multiplication (i.e., `u + v` is $u * v$ in the group), and negation corresponds to inversion.
    - *Zero and One*: Additive zero `0` corresponds to the group identity; multiplicative one is always the group identity.
- *Action*: For $u$ in the module and $x \in 'N(A)$ (the normalizer of $A$), there is an action `u ^@ x` defined as the image in the module of the conjugation of the underlying group element by $x$, when $x$ normalizes $A$.
- *Isomorphisms*: Various canonical morphisms are established between the group and its associated module, respecting both group and module operations.

### 3. Transfer Homomorphism

- *Motivation*: Given a subgroup $H$ of $G$ and a group morphism $f : H \to rT$ (usually abelian), one defines the transfer from $G$ to the module induced by $H$ and $f$. It is central in the study of group extensions, splitting theorems, and focal subgroup computations.
- *Notation*: `transfer sHG abfH`, where:
    - `sHG : H \subset G` – $H$ is a subgroup of $G$.
    - `abfH : abelian (f @* H)` – the image of $H$ under $f$ is abelian.
    - The transfer sends $g \in G$ to a sum (in the appropriate module) over coset representatives, expressing products of $g$ and transversal elements, lifted via $f$.
- *Cosets and Transversals*: The implementation leverages explicit coset partitions `rcosets H G`, as well as their refinement with respect to cycles `<[g]>$ for an element $g \in G$.

### 4. Splitting and Transitivity Theorems (Gaschütz)

- *Splitting*: The presence of complements to normal abelian subgroups under coprimality conditions.
- *Transitivity*: The action of conjugation on the set of complements to an abelian subgroup is transitive under the same conditions.
- *Encoding*: Proved as theorems about set-theoretic properties of certain subgroups and their interrelations (`[splits G, over H]` notation, complements, conjugates, etc.)

### 5. Centralizer/Commutator Results

- *Content*: Theorems such as the “coprime abelian centralizer/commutator trivial intersection” assert that the intersection of the centralizer of $A$ with the commutator subgroup $[G, A]$ is trivial under coprimality assumptions.
- *Type*: Lemmas operating over `{group gT}` and using subset, abelian, normalizer, and commutator predicates.

Key Coding and Notational Conventions
-------------------------------------

- **Locales and Implicit Arguments**: The file globally sets implicit arguments and scopes (notably `GroupScope` and `ring_scope`) for uniform notation. Notations like `u ^@ x` refer to module actions, and additive notation is sometimes used for group operations, reflecting the module point of view.

- **Module System**: Most crucial definitions (the finite module structure, its operations, and canonically associated morphisms and instances) are encapsulated inside the Coq module `FiniteModule`. This modular packaging aids in name management and avoids polluting the global namespace.

- **Type Synonyms and Coercions**: The module structure is built on top of group subtypes; coercions and canonical structures ensure seamless conversion between group elements, subgroups `{group gT}`, and module elements `fmod_of abelA`. Projections and injections are tightly controlled via coercion and cancelation lemmas.

- **Action Notation and Scopes**:
    - The notation `u ^@ x` is reserved for the module action induced by conjugation (and is valid when $x \in 'N(A)$).
    - The action is also given canonical MathComp “Action” and “GroupAction” structures to integrate with the standard group action theory hierarchy.
    - Notations like `''M'` denote these module actions in the expected scopes.

- **Cosets, Transversals, and Big Operators**:
    - The file uses explicit manipulation of coset representatives and transversals. The notation `rcosets H G` denotes the set of right cosets of $H$ in $G$.
    - Sums over transversals or coset representatives are denoted using `\sum_` big operator notation.
    - Cycle partitions and their transversals (`HG :* <[g]>`) are used to expand transfer morphisms with respect to the action of a single element.

- **Cancellation and Morphism Lemmas**:
    - There are numerous “cancel” and “morphism” lemmas (e.g., `fmodK`, `fmvalK`, `fmodM`) ensuring that the module and group representations are inverse on the appropriate subsets, and that actions and morphisms preserve structure as expected.
    - Reflection between group (multiplicative) and module (additive) notation is managed via dedicated lemmas on morphisms/structure.

- **Export and Namespaces**:
    - Only the definitions and instances intended for outside use are exported via the `Exports` submodule, managing exposure and minimizing accidental reuse/conflict.

- **Abstraction Barriers**:
    - Except for the exposed operations and definitions in `FiniteModule.Exports`, the internals of the module construction and its supporting lemmas are not meant to be used directly—this enforces a separation of concerns.

Context for Retrieval and Usage
------------------------------

Understanding and documenting code blocks from this file requires familiarity with the following context:

1. **FiniteModule** is the core abstraction for relating finite abelian groups and ℤ-modules; all module operations and morphisms (including the conjugation action and transfer homomorphism) are built in terms of it.

2. **Group/module interaction**: The file leverages deep symmetry between group operation (multiplicative) and module operation (additive)—hence, many lemmas clarify or enforce this identification, and some notations and operations bear both an additive and multiplicative interpretation, depending on the context.

3. **Transfer and Gaschütz**: The various expanded forms and independence lemmas for the transfer morphism depend on explicit choices of transversal sets for coset partitions, as well as precise counting and partitioning of group elements especially in the presence of group actions (e.g., via $<[g]>$).

4. **Coprimality**: Several central results assume orders of groups or index subgroups are coprime; this ensures splitting of extensions and triviality of intersections in commutator/centralizer relationships.

5. **Notational Conventions**: Unless otherwise stated, module notation is additive and group notation is multiplicative; explicit tactics and notations (e.g., for sums, group actions), as well as abbreviations for subgroups and group elements (e.g., `G`, `H`, `A`, `P`, `K`, `L`, `g`, `u`, `v`), are to be interpreted in this mix of conventions.

6. **Usage of Canonical Structures and Type Classes**: The file exploits MathComp’s layering of canonical structures to have objects automatically inferred as appropriate instances of abstract algebraic interfaces (like `isZmodule`, `Finite`, `GroupAction`), greatly smoothing the use of these objects in subsequent developments.

In summary, this file lays the groundwork for encoding abelian groups as modules, harnesses this viewpoint to define transfer and study splitting and conjugacy via classical theorems, and equips the type-theoretic setting with sufficient structure to make further developments in representation theory seamless and robust.
