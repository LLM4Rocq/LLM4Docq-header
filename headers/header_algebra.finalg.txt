
Finite Algebraic Structures on Finite Types

Overview
========
This file systematically extends the MathComp formalization of algebraic structures to the context of finite types. Its main objective is to define finite versions of all core algebraic structures—such as modules, rings, fields, algebras, and their additive and multiplicative substructures—and to establish canonical ties between these algebraic concepts and the combinatorial (finite) framework native to the MathComp ecosystem. By “cloning” the algebraic hierarchy for finite types, this file enables seamless reasoning and type inference across expressions that involve both algebraic and combinatorial (set-theoretic or group-theoretic) operations, especially within formal developments that leverage both finite algebra and finite group theory.

Mathematical Objects and Their Representations
==============================================
The principal mathematical structures introduced or adapted in this file are as follows; each is realized as a Coq type class or structure equipped both with algebraic operations and computational finiteness:

1. **Finite Additive Groups and Modules**
   - `finNmodType` (Finite N-Module): Finite additive commutative monoids.
   - `finZmodType` (Finite Z-Module): Finite additive (possibly non-commutative) groups.
   - For both, the underlying set is finite, and the group/module operations are inherited from the classical MathComp algebraic hierarchy (`GRing.Nmodule`, `GRing.Zmodule`), with an added requirement that the carrier is a `finType`.

2. **Finite Rings and Semirings**  
   - `finPzSemiRingType`, `finNzSemiRingType`: Finite (possibly non-unital) semirings, with/without zero, as finite types.
   - `finPzRingType`, `finNzRingType`: Finite (possibly non-unital) rings.
   - `finComPzSemiRingType`, `finComNzSemiRingType`: Finite commutative semirings, with/without zero.
   - `finComPzRingType`, `finComNzRingType`: Finite commutative rings.
   - `finUnitRingType`, `finComUnitRingType`: Finite (commutative) unit (i.e., equipped with multiplicative units) rings.
   - All these are realized by extending the corresponding `GRing.*` structures with a finiteness condition.

3. **Finite Fields and Domains**
   - `finIdomainType`: Finite integral domains—rings without zero-divisors, where the set is finite.
   - `finFieldType`: Finite fields, i.e., commutative division rings on a finite type. It is further enriched to be canonically *decidable*: all logical formulas over a finite field can be algorithmically decided.

4. **Finite Algebras and Modules over Rings**
   - `finLmodType R`: Finite left modules over a finite (possibly non-unital) ring `R`.
   - `finLalgType R`: Finite left algebras over ring `R`.
   - `finAlgType R`: Finite algebras over ring `R`.
   - `finUnitAlgType R`: Finite unit algebras over a unit ring `R`.

5. **Units Group and Group Actions**
   - `{unit R}`: The subtype of units (invertible elements) of a finite ring `R`, realized as a finite type itself.
   - This subtype `{unit R}` inherits a group structure under multiplication and supports canonical group actions:
     - `'U%act`/`'U`: The (right) group action of the unit group on the ring via multiplication.
   - The file establishes canonical group-theoretic isomorphisms between the additive group of a ring/module and their representation as finite groups in the group theory hierarchy.

6. **Morphisms and Inference**
   - All constructions leverage the Hierarchy-Builder (HB) framework, making the coercions, inheritance, and canonical structure registration robust and modular. This ensures that algebraic reasoning and combinatorial finiteness are properly integrated for all these finite structures.

Key Coding and Notational Conventions
=====================================
- **Naming Conventions**: All finite variants of algebraic structures are consistently prefixed by `fin` (e.g., `finRingType`). The module `FinRing` encapsulates these definitions.

- **Short Notations**: Attribute markers like `#[short(type="finZmodType")]` are used to ensure that the shorter names can be referred to directly, and deprecation notations provide backward compatibility.

- **Canonical Inheritance and Coercion**:  
    - HB structures and instances are systematically provided so that finite structures automatically inherit all algebraic and combinatorial properties, and coercions to group- and set-theoretic types are available for generic reasoning.
    - Explicit coercions (e.g., from a finite ring to its underlying additive group) ensure notational convenience and interoperability with both group theory and combinatorics.
  
- **Action and Group Notations**:
    - Group actions are denoted `'U%act` and `'U`, with scopes set to resolve notational overloads as appropriate.
    - The subgroup of units `{unit R}` is always considered as a finite group, where `val` projects onto the underlying ring element.

- **HB Export and Section Mechanics**:
    - Canonical instances (for both algebraic and combinatorial properties) are registered using `HB.instance`, and the relevant notation is publicized using `HB.export`.
    - Section mechanisms and modules like `Theory` collect key lemmas about these finite structures for easy import.

- **Reflection and Decidability**:  
    - Decidability and Boolean reflection are systematically provided, especially for finite fields, so universal and existential quantification over these structures can always be checked algorithmically.
    - Lemmas like `card_finNzRing_gt1` and `card_finField_unit` establish cardinalities of sets of ring elements or units, leveraging the finiteness property.

- **Backward Compatibility**:  
    - Deprecated notations and modules are provided for users accustomed to earlier naming conventions, with clear guidelines and redirections to newer structure names.

- **Specializations**:  
    - The file also applies these finite algebraic structures to the `bool` type, showing that the Boolean type (with exclusive-or as addition and logical-and as multiplication) forms a finite ring and a finite field of cardinality 2.

Intended Use and Context for Retrieval
======================================
This file serves as the foundational bridge between combinatorial finiteness and algebraic structure in the MathComp libraries. The extended finite hierarchy it defines allows for formal developments that require simultaneous access to algebraic operations (addition, multiplication, inversion) and combinatorial operations (enumeration, sets, group theory) on the same underlying types. Code chunks from this file provide ready-made type class instances, canonical morphisms, and group actions needed to reason uniformly about finite algebraic structures, their units, and the interplay between the additive and multiplicative group structures. To interpret or document individual sections or lemmas, one should bear in mind that every algebraic concept is always internalized to finite types, and that these are canonically linked with their corresponding combinatorial structures both at the level of operations and formal proofs.

