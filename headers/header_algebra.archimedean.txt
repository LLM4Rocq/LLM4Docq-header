
Archimedean Numeric Structures in MathComp

===============================================================================
Overview and Purpose
===============================================================================

This Coq source file introduces and formalizes *Archimedean* numeric algebraic structures on top of MathComp's existing hierarchy of rings, fields, ordered fields, and real closed fields. Its main objective is to specify and provide ways to work with rings and fields (and related structures) that satisfy the *Archimedean property*, an essential property of familiar number systems like the real numbers ℝ and rational numbers ℚ. 

The Archimedean property ensures that, given any number in the structure, it is possible to bound it between two integers (or naturals), thereby enabling the definitions and manipulations of integer and natural number "parts" (like floor, ceil, and truncation), crucial for analysis, number theory, and algorithmic mathematics.

This file:
- Extends the MathComp numeric hierarchy with Archimedean extensions,
- Defines key integer-part operations (floor, ceil, truncation) on these structures,
- Provides characterizations and properties of integer-like and natural-like elements (“integers” and “naturals”) within these structures,
- Establishes interfaces (via type classes and HB mixins) for using these concepts abstractly in user developments.

===============================================================================
Mathematical Objects and Their Representation
===============================================================================

The file formalizes the following essential mathematical notions and structures:

**1. Numeric Algebraic Structures (with Archimedean Property):**
   - *Archimedean Numeric Domain*: A ring with a numerical (ordered) structure satisfying the Archimedean axiom.
   - *Archimedean Numeric Field*: A field with the above properties.
   - *Archimedean Closed Field*: An algebraically closed field that is also Archimedean (e.g., the complex numbers with real/imaginary parts in ℝ).
   - *Archimedean Real Domain / Field*: (Ordered) fields of real numbers with Archimedean property.
   - *Archimedean Real Closed Field*: An ordered field that is both real closed and Archimedean.

   **Representation**: Each of these is represented by a structure (an HB structure in the Hierarchy-Builder style). The structure includes:
   - A carrier type R,
   - The "parent" numeric/classical algebraic structure (from MathComp’s hierarchy),
   - An Archimedean mixin, encapsulating the extra operations and properties.

**2. Integer-Part Operations:**
   - *Floor*: `floor x` returns the greatest integer less than or equal to x (when x is real).
   - *Ceil*: `ceil x` returns the smallest integer greater than or equal to x (when x is real).
   - *Truncation*: `truncn x` gives the greatest natural number less than or equal to x (when x is nonnegative).

   **Representation**: These are Coq functions defined for elements of `R`, returning elements of Coq’s `int` (for floor and ceil) or `nat` (for truncn). The properties of these functions (correct placement within appropriate intervals) are captured as part of structure mixins.

**3. Numeric Subsets:**
   - *Integer-like elements*: `x \is a Num.int` ("x is a numeric integer") holds if x equals some integer in R.
   - *Natural-like elements*: `x \is a Num.nat` ("x is a numeric natural") holds if x equals some natural in R.

   **Representation**: These are Boolean predicates (`pred R`), defined as structure fields and reflected by logical equivalences (using Ssreflect's `reflect` mechanism).

**4. Other Operations and Bounds:**
   - *Upper bound*: `bound x` gives a natural n such that `|x| < n`.
   - *Relations and morphisms*: Lemmas relate floor, ceil, and truncation to basic algebraic operations (add, mul, pow), and to morphisms like ring automorphisms and conjugation.

===============================================================================
Key Conventions and Notational Principles
===============================================================================

- **Hierarchy-Builder (HB) Structures**: All algebraic and numeric structures are defined as HB structures using mixins and factory patterns, enabling extensible, modular inheritance of properties and operations.

- **Canonical Names and Shortcuts**: Each structure comes with a canonical type and HB class name (e.g., `archiNumDomainType`, `archiNumFieldType`) to be used in type annotations and instance declarations.

- **Reflection and Boolean Predicates**: Predicates such as `x \is a Num.int` or `x \is a Num.nat` are tied by reflection lemmas to classical mathematical quantifications (i.e., "there exists n such that x = n" etc.), blending computational and proof-based styles.

- **Local Notation and Scoping**: Operations and predicates introduced are bound to the numeric or ring scope, and short notations are provided for frequently used concepts (`Num.nat`, `Num.int`, etc.). Deprecated forms are aliased to the new names with annotations, facilitating backward compatibility.

- **Bundled Exports**: All relevant notations, structures, and instances are exported from submodules, allowing users to access this functionality by simply importing the provided modules.

- **Deprecation and Evolution**: The file maintains notations/lemmas for deprecated names alongside the current ones, with clear indications (and replacement notes), to ensure smooth migration for users of older versions.

- **Structure Factories and Builders**: When possible, Archimedean mixins can be constructed from weaker data, such as just the existence of bounds for elements, or truncation operations and their properties.

===============================================================================
Guidance for Code Chunk Interpretation and Comment Generation
===============================================================================

When interpreting or documenting code chunks from this file, keep the following in mind:

- Each new structure encapsulates both the existing algebraic structure (e.g., numeric field) and Archimedean operations/properties.
- Integer-part and truncation operations are defined abstractly, not for concrete types only, and their correctness is central.
- Boolean predicates for integer and natural elements mirror classical set-theoretic accounts, with automation for reflection.
- Morphisms, ring automorphisms, and conjugations, as well as basic algebraic relations, all respect these integer-part operations, and there are specialized lemmas supporting their use.
- The module includes compatibility layers for legacy naming, deprecations, and notational changes, which may be referenced for code written using older conventions.

===============================================================================
Summary
===============================================================================

In summary, this file robustly extends the MathComp algebraic hierarchy to include Archimedean numeric structures, enabling floor, ceiling, and truncation operations in abstract settings. It establishes the interfaces and theorems needed to reason about numeric domains and fields as encountered in real analysis, computer algebra, and algebraic number theory, all within the expressive and formal framework of Coq and MathComp.
