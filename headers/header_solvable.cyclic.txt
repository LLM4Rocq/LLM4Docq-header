
(***********************************************************************)
(* Cyclic and Metacyclic Groups: Theory and Isomorphisms               *)
***********************************************************************

Purpose and Goal
================
This Coq source file formalizes the foundational theory of cyclic and metacyclic groups in the context of finite group theory. The main goal is to characterize the structure, properties, and morphisms of cyclic groups within the finitary algebraic hierarchy, and to develop key results about generators, automorphism groups, and connections with field multiplicative groups. The file provides both Boolean and constructive characterizations, supporting both classic mathematics and computational verification. It also addresses isomorphism results that connect cyclic groups with additive and multiplicative structures over finite fields and rings.

Mathematical Objects and Representations
========================================
**1. Finite Groups and Subgroups:**
   - The type `finGroupType` denotes finite group types, leveraging MathComp’s group infrastructure.
   - Subgroups (`{group gT}`) and finite sets (`{set gT}`) are used to model various group-theoretic objects.

**2. Cyclic Groups:**
   - Given an element `x` of a finite group, `<[x]>` is the (cyclic) subgroup generated by `x`.
   - The order of an element `x`, denoted `#[x]`, is defined as the size of `<[x]>`.
   - The predicate `cyclic A` is true when `A` is a cyclic group (existence of a generator).

**3. Generators:**
   - The Boolean predicate `generator G x` asserts that `x` is a generator of the cyclic group `G` (i.e., `G = <[x]>`).

**4. Isomorphism with Additive and Multiplicative Groups:**
   - The additive group of integers modulo `n`, denoted `Zp n`, is used to establish canonical isomorphisms with cyclic groups via `Zpm`.
   - The morphism `Zpm` maps each element of `Zp #[x]` to `a ^+ i` in `<[a]>`.
   - The group of units modulo `n`, `units_Zp n`, is used to describe automorphisms of cyclic groups, with `Zp_unitm` providing an explicit mapping to `Aut <[a]>`.

**5. Morphisms Between Cyclic Groups:**
   - The file defines canonical morphisms, including the smallest possible morphism between two cyclic groups of related orders (`eltm`), and characterizes their kernels, images, and injectivity.

**6. Order-Related Properties:**
   - Definitions and lemmas for calculating the order of group elements and their powers, as well as expressions for the order of product elements and structure of direct products.
   - Euler’s totient function (`totient n`) is used to count generators and automorphisms.

**7. Metacyclic Groups:**
   - A group is metacyclic if it has a normal cyclic subgroup and the corresponding quotient group is cyclic; formalized by the predicate `metacyclic`.

**8. Automorphism Groups:**
   - The group of automorphisms `Aut G` is studied in detail for cyclic and prime order groups, showing, for instance, that it is cyclic and counting its elements via Euler’s function.

**9. Connections to Fields:**
   - The classical result that any finite subgroup of a field’s multiplicative group is cyclic is formally proven.
   - Characterizations and constructions of primitive roots in finite fields are given.

**10. Prime Order and Small Groups:**
   - Specialized results for cyclicity in groups of prime or small order.

Key Notational and Coding Conventions
========================================
- **Operator Notation:**
  - Exponential notation `x ^+ n` denotes repeated group product (power).
  - Membership and subgrouphood, e.g., `x \in G`, `H \subset G` follow the standard set-theoretic style from MathComp.
  - Group-theoretic operations: product `*`, direct product `\x`, central product, commutativity, and normality are notated using MathComp idioms.
  - The set equality `:==:` is used to compare subgroups up to group structure.

- **Boolean Reflection:**
  - Core group-theoretic properties are represented by Boolean predicates (e.g., `cyclic`, `generator`) as well as their logical equivalents, with `reflect` lemmas connecting the computational and logical perspectives.
  - Proof search and rewriting is available via `reflect`, enabling effective use of Ssreflect tactics.

- **Canonical Structures and Morphisms:**
  - Essential morphisms (e.g., `Zpm`, `eltm`, `cyclem`, `Zp_unitm`) are provided with canonical instances, supporting automated inference and compositional reasoning.
  - Morphisms are given both as functions and bundled `Morphism` objects, leveraging MathComp's canonical structure mechanisms.

- **Sectional Organization:**
  - The file is structured into well-scoped sections for cyclic theory, morphisms, generators, metacyclic groups, automorphisms, and field applications, each parameterized by the relevant group types and variables.

- **Argument and Implicitness:**
  - `Set Implicit Arguments` ensures that many types and parameters are inferred, simplifying notation within definitions and lemmas.
  - `Prenex Implicits` is used for foundational notions to streamline their use in higher-order contexts.

- **Generalization:**
  - All statements are given for arbitrary finite group types (not restricted to concrete implementations), highlighting the generality of the results.

- **Field and Ring Notation:**
  - Multiplicative (`*`) and additive notation are distinguished according to the carrier group or field structure.
  - For statements about characteristic polynomials and roots in fields, ring and field notations (as in MathComp's GRing library) are in scope.

Context for Retrieval and Code Interpretation
==============================================
This file serves as the canonical MathComp development for the structure, recognition, and mapping of cyclic and metacyclic groups, including their automorphisms and relationships to field multiplication groups. Anyone reading individual code snippets or lemmas from this file should interpret:

- Any assertion about `cyclic`, `generator`, or `metacyclic` as a fundamental property about (finite) group generation.
- Morphisms such as `Zpm`, `cyclem`, or `eltm` as explicit mappings between canonical cyclic (sub)groups, always accompanied by clear order and structure considerations.
- Results involving `Aut G` as precise statements about automorphism group structure, with explicit formulas for their cardinality.
- Lemmas connecting groups to field or ring structures as formalizations of classical results (e.g., every finite subgroup of a field's unit group is cyclic).
- Theorems are generally presented in both constructive and Boolean-reflective style, ensuring machine-checked equivalence of standard definitions from abstract algebra.

In summary, the file is a comprehensive and foundational formalization of cyclic and metacyclic group theory in finite settings, emphasizing explicit morphisms, isomorphism results, canonical generators, and connections to other algebraic structures. Its results, conventions, and notations are designed for seamless integration with the broader MathComp library and for ease of retrieval and application in future developments across algebra and field theory.
