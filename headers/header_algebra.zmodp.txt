
(*
******************************************************************************

Modular Arithmetic and Prime Fields in MathComp

Overview
========

This file develops the structures, operations, and properties of additive groups, rings, and fields formed from the integers modulo a natural number p within the Mathematical Components (MathComp) framework. It provides a formalization of modular arithmetic (arithmetic modulo p), the construction of the ring of integers modulo p (commonly denoted Z/pZ or ℤ/pℤ), and prime fields F_p (the field with p elements when p is prime), along with their algebraic and group-theoretic structures.

The design ensures that all definitions are carried out using finite types and canonical structures favored in MathComp, enabling seamless interoperability with the broader MathComp algebra and group theory ecosystem.

Mathematical Objects and Their Representations
=============================================

1. Modular Ring ('I_p and 'Z_p):

   - The type `'I_p` represents the finite set of natural numbers {0, 1, ..., p-1} as an ordinal finite type. This serves as the canonical carrier for modular arithmetic modulo p.
   
   - The projection `inZp : nat -> 'I_p` computes the canonical representative of a natural number modulo p (i.e., inZp n ≅ n mod p). This embeds the standard integers (nat) into `'I_p`.
   
   - Addition, negation (additive inverse), and multiplication modulo p are defined as `Zp_add`, `Zp_opp`, and `Zp_mul` respectively, with ring-theory properties (associativity, commutativity, distributivity, and normal forms) formally proven. Multiplicative inverses (`Zp_inv`) are also provided for the subset of units.
   
   - For the purposes of constructing canonical ring structures, a type `'Z_p` (notation) is introduced as the integers modulo `max p 2`. This ensures the structure has at least two elements and thus excludes pathological cases (such as "rings" of cardinality 1).

2. Algebraic Structures:

   - `'I_p`, for p ≥ 1, is given the structure of a finite additive abelian group (zmodType and finGroupType).
   
   - For p ≥ 2, `'I_p` (and thus `'Z_p`) is given a canonical ring structure (finComUnitRingType), which supports both additive and multiplicative units.
   
   - The group of units (invertible elements) in these rings is represented by `{unit 'Z_p}`; the set of such units forms a finite abelian group.

3. Subgroups and Related Sets:

   - `Zp p` denotes the (additive) subgroup of `'Z_p` corresponding to the integers modulo `max p 1` (ensuring at least the zero group in degenerate cases).
   
   - `units_Zp p` is the group of all units (invertible elements) in `'Z_p` under multiplication.

   - All these group structures are proven abelian, and their cardinalities (number of elements) are computed using number-theoretic functions (e.g., Euler’s totient function for the group of units).

4. Prime Fields ('F_p):

   - The type `'F_p` denotes the finite field with p elements; when p is prime, this is constructed over the first prime divisor of `max p 2` (so as to always produce a true field).
   
   - Conversions and canonical equalities between `'Z_p`, `'I_p`, and `'F_p` are provided for cases when p is known to be a prime (ensuring that structural and computational properties align).

   - Key properties of the field, such as characteristic, cardinality, and unit group, are established.

Key Coding and Notational Conventions
=====================================

1. Implicit Arguments and Scopes:

   - The file systematically uses implicit arguments to avoid clutter and facilitate working with generic parameterized types. The MathComp local ring scope (`ring_scope`) is opened to enable standard operations and notations.

2. Type Notations:

   - `'I_p` is the finite type of mod p residue classes.
   
   - `'Z_p` abbreviates `'I_(max p 2)`, a "safe" modular ring of at least two elements.
   
   - `'F_p` denotes the prime field associated to p; it is constructed as `'Z_(pdiv p)`, where `pdiv` computes the minimal relevant prime divisor.

   - Standard abbreviations are introduced:
     - `Zp0`, `Zp1` for additive and multiplicative units (0 and 1)
     - `Zp_add`, `Zp_opp`, `Zp_mul`, `Zp_inv` for the four basic modular ring operations

3. Canonical Structures and Instances:

   - The development uses the Hierarchy Builder (HB) and MathComp's canonical structure facilities to register all group, ring, and field instances, so that type class inference can resolve algebraic structure automatically where possible.
   
   - For units (invertibles), `{unit R}` types with appropriate group structure are established.

4. Type Coercions and Valuations:

   - Elements of `'I_p` can be seen as natural numbers via the `val` projection. Throughout, conversion functions and lemmas facilitate moving between representations (e.g., between nat, `'I_p`, and `'Z_p`).

   - For field elements and ring elements arising from naturals, `n%:R` denotes the canonical embedding ("numeral as ring element").

5. Handling of Pathologies and Edge Cases:

   - The file takes care to ensure the modular ring is never constructed with only one element (degenerate case). This is handled by truncating via `max p 2` or analogous devices.

   - In all occurrences, additive and multiplicative identity behavior is carefully specified to reflect MathComp's approach to finite algebraic structures.

6. Boolean Equality and Reflection:

   - When possible, boolean predicates are established alongside group/ring ones to allow reasoning in both computational (boolean) and propositional styles, as is standard in MathComp.

Organization and Usage
=====================

- Definitions and structures for modular arithmetic and finite abelian groups are built first in total generality, followed by increasing specialization: from additive groups to rings to fields.

- Specialized sections provide further support for generic algebraic manipulation, canonical isomorphisms, and group-theoretic properties (e.g., cyclicity, orders, subgroup characterizations).

- Helper lemmas facilitate reasoning about modular arithmetic in proofs (e.g., conversion from integers/naturals, computation of inverses, verification of field/ring axioms, character calculations).

- Deprecated notations and lemmas are maintained (but marked as such) to ease transition from older versions of the library and for backward compatibility.

Summary
=======

In summary, this file is the foundational piece in MathComp for working with modular arithmetic, finite rings, and prime fields, offering all definitional, structural, and computational machinery needed for their algebraic, group-theoretic, and number-theoretic properties. All mathematical concepts are realized as concrete types and operations in Coq, with canonical structures enabling high-level generic development and proof in algebra and group theory.

******************************************************************************)
