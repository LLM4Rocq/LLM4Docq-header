
Matrix Rank and Row Space Theory: Linear Algebra via Matrices
=============================================================

Purpose and Goal
----------------
This file develops a comprehensive and generic formalization of finite-dimensional linear algebra within the Coq proof assistant, using the Mathematical Components (MathComp) library. Its main objective is to provide a concrete but flexible matrix-based model for handling vector spaces, subspaces, linear maps, F-algebras, and their associated structures for modules over a field `F`, by means of rank computations, row spaces, and various canonical matrix constructions. The file aims to serve both as a foundation for abstract linear algebra over finite-dimensional vector spaces and as a robust infrastructure for advanced topics such as module/ideal/ring theory and the theory of finite group representations.

Mathematical Objects and Their Formal Representations
----------------------------------------------------

### Matrices and Vector Spaces
- **Matrices (`'M[F]_(m, n)`):**
  Rectangular arrays of elements from a field `F` with `m` rows and `n` columns. They are the primary data structure for encoding vectors, families, subspaces, and linear maps.

- **Finite Dimensional Vector Spaces:**
  Subspaces are represented concretely as sets of row vectors, each encoded as a matrix whose rows span the subspace.

### Matrix Decomposition and Rank
- **Gaussian Elimination (`Gaussian_elimination`):**
  An extended Gaussian elimination algorithm (similar to LUP decomposition), locked for abstraction. It returns a triple `(L, U, r)` such that:
    - `L`: A column-permuted lower-triangular invertible matrix,
    - `U`: A row-permuted upper-triangular invertible matrix,
    - `r`: The rank of the original matrix.
  They satisfy the identity `L * pid_mx r * U = A`.

- **Rank (`\rank A`):**
  The dimension of the row space of matrix `A`, i.e., the maximal number of linearly independent rows. The definition is robust with respect to 0-sized matrices.

- **Row/Column Bases and Decompositions:**
  - `row_base A`: A minimal set of linearly independent rows forming a basis for the row space.
  - `col_base A`: A basis for the column space.
  - `row_ebase, col_ebase`: The extended bases from the Gaussian elimination output, designed to facilitate the construction of complements and kernels.

### Subspace Operations and Predicates
- **Row Free/Fullness:**
  - `row_free A`: The matrix rows are linearly independent (rank equals number of rows).
  - `row_full A`: The row space spans all row vectors of given length (rank equals number of columns).

- **Inclusions and Equivalences:**
  - `A <= B %MS`: The row space of `A` is included in the row space of `B`. Implemented as `A *m cokermx B == 0`.
  - `A < B %MS`: Strict inclusion.
  - `A == B %MS`: Equality of row spaces (mutual inclusion).
  - `A :=: B %MS`: A more general notion of equivalence, identified by identical rank and inclusion behavior, even if matrices have different row counts.

- **Canonical/Normal Forms:**
  - `<<A>> %MS`: A canonical square matrix with the same row space as `A` (“the closure” of the row space).
  - Complements (`A^C %MS`), kernels (`kermx`), cokernels (`cokermx`), and partial inverses (`pinvmx`) are provided for robust reasoning about subspaces and their orthogonals.

### Algebra of Subspaces
- **Set-like Operations (with %MS Scope):**
  - `A + B %MS`: Row space sum (span) of two matrices.
  - `A :&: B %MS`: Intersection of row spaces.
  - `A :\: B %MS`: Complement of the intersection inside `A`'s row space.
  - `proj_mx U V`: Projection onto one summand of a direct sum.
  - **Big operators:** Indexed sums and intersections over finite types (e.g., `\sum_i ...` and `\bigcap_i ...`), compatible with associative/commutative monoidal structures.

- **Direct Sums (`mxdirect S`):**
  Predicate expressing that a setwise sum of subspaces is direct, i.e., the rank of the sum equals the sum of the individual ranks. Powered by a bespoke canonical structure (`mxsum_expr`) that decomposes matrix expressions into binary/n-ary sums with accurate rank-tracking.

- **Stability of Subspaces (`stablemx V f`):**
  Characterizes when a linear map `f` preserves a subspace `V`.

### Algebras, Ideals, and Centralizers via Matrices
- **Matrix Algebras (`'A[F]_(m, n)`):**
  Subalgebras of matrices represented as `m`-rowed matrices of size `n^2`, each row encoding a matrix via “flattening” (`mxvec`). This enables expressing subalgebras, centralizers, centers, and (bi/left/right) ideals set-theoretically via matrices and their row spaces.

- **Membership and Operations:**
  - `A \in R`: Matrix `A` belongs to the matrix algebra encoded by the row space of `R`.
  - `R * S %MS`: The subalgebra generated by products of members of `R` and `S`.
  - `'C(R) %MS`: The centralizer of a set of matrices (`R`).
  - `'Z(R) %MS`: The center of `R`.
  - `left_mx_ideal R S`, `right_mx_ideal R S`, `mx_ideal R S`: Predicates for (bi)ideals.
  - `mxring R`: Predicate expressing that `R` encodes a non-trivial subring with (possibly non-identity) ring structure.

- **Membership Predicates and Reflection:**
  Positive use of reflection predicates (in the sense of Coq's Ssreflect) for reasoning about membership, inclusions, direct sums, and algebraic properties.

### Eigenvalues and Eigenspaces
- **Eigenspaces and Eigenvalues:**
  - `eigenspace g a`: The eigenspace of eigenvalue `a` for linear map `g`.
  - `eigenvalue g a`: Boolean predicate indicating whether `a` is an eigenvalue of `g`.
  - Associated reflection lemmas and direct sum results support spectral analysis.

### Maximal/Full Rank Submatrices
- **`maxrankfun`, `fullrankfun`:**
  Canonical injective maps extracting the largest possible set of independent rows (or all rows when `row_full`) from a matrix, with the property that the induced submatrix achieves maximal or full rank.

Key Conventions and Notation
----------------------------

1. **Scope Management:**
    - The `%MS` (matrix set) scope is dedicated to notions and operations on matrix-encoded subspaces. It should not be opened globally to avoid confusion with base matrix operations.
    - Matrix dimensions are tracked explicitly, with type-level indices, and many notations are overloaded with parsing/printing variants for convenience.

2. **Notation and Operators:**
    - Shorthand notations: `\rank A` for rank, `<<A>>` for closure, `A^C` for complement, `A <= B` for inclusion, etc., as described above.
    - Operations such as row/column selection, direct sums, projections, and pseudoinverses are given through dedicated functions (`row_sub`, `proj_mx`, etc.).
    - Big operators for sums/intersections adopt the MathComp `\sum_`/`\bigcap_` conventions, but within the `%MS` scope.

3. **Canonical Structures and Reflection:**
    - Canonical structures are used extensively for overloading operations, supporting structural inference, and managing component expansions in direct sum reasoning and other composite constructions.
    - Many predicates are “reflection-lifted” — i.e., both their Boolean and propositional forms are provided, with reflection lemmas to bridge them, supporting both constructive and proof-relevant use.

4. **Locked Definitions and Abstraction Barriers:**
    - Key computational definitions (e.g., `Gaussian_elimination`, various forms of `addsmx`, `capmx`, etc.) are _locked_ to promote modular reasoning and abstraction.
    - Canonical representations are always preferred (e.g., `<<A>>` is the unique normal form for the row space generated by `A`).

5. **Uniform Handling of Degenerate Cases:**
    - Definitions and notations are robust to degenerate sizes (zero-dimensional spaces, rectangular matrices) and handle identity/zero matrices canonically, especially in the behavior of set-like sum and intersection operations.

6. **Type-Directed Abstractions:**
    - When defining sums/intersections of subspaces, or reasoning about matrix algebras, type parameters are used to select correct dimensions, and canonical structures dictate how expressions are normalized and interpreted.

7. **Parametricity/Field Morphisms:**
    - The entire theory is set up to be functorial in the underlying field (`fieldType`), and compatibility under field morphisms (`map_mx`) is systematically provided.

Context for Retrieval and Comment Generation
-------------------------------------------
This file forms the formal backbone of MathComp's approach to matrix-based linear algebra, including advanced interface abstractions for subspace operations, algebraic structures, and spectral theory. Given this docstring alone, a reader (or LLM) can accurately interpret the formal intent and usage of:
- Rank, kernels, (co)kernels, and complements;
- Row/column space inclusions and equivalences;
- Set-like operations on subspaces (sum, intersection, difference, complement);
- Structures of direct sums, stability, matrix algebras, centralizers, and ideals;
- Canonicalization of subspaces and mapping via field morphisms.

Additionally, conventions regarding locking, scopes, and canonical forms are crucial for correctly understanding/improving/using or documenting particular chunks in the code.

Summary Table of Key Notation (when scoped with %MS)
----------------------------------------------------
| Notation          | Meaning                                                      |
|-------------------|--------------------------------------------------------------|
| `\rank A`         | Dimension of the row space of `A`                            |
| `A <= B`          | Row space of `A` is included in that of `B`                 |
| `A < B`           | Strict row space inclusion                                   |
| `A == B`          | Row spaces of `A` and `B` are equal                         |
| `A :=: B`         | Row spaces of `A` and `B` act identically (possibly differing sizes)|
| `<<A>>`           | Canonical (square) representative of the row space generated by `A`|
| `A + B`           | Sum (span) of row spaces                                     |
| `A :&: B`         | Intersection of row spaces                                   |
| `A :\: B`         | Complement of intersection with `B` in the row space of `A`  |
| `A^C`             | Complement of the row space of `A`                           |
| `\sum_i ...`      | Big sum (span) of a family of row spaces                     |
| `\bigcap_i ...`   | Big intersection of a family of row spaces                   |
| `mxdirect S`      | Predicate that `S` is a direct sum of subspaces              |
| `A \in R`         | Membership of `A` in algebra/subalgebra `R`                  |
| `R * S`           | Product subalgebra generated by `R` and `S`                  |
| `'C(R)`           | Centralizer of the set/subalgebra `R`                        |
| `'Z(R)`           | Center of the subalgebra `R`                                 |

Conclusion
----------
The file establishes a cohesive and expressive infrastructure for developing finite-dimensional linear algebra and related algebraic theories via matrices in Coq. It rigorously connects concrete computations (Gaussian elimination, canonical forms) with abstract algebraic structures and provides a rich palette of tools and notations for reasoning about subspaces, direct sums, ideals, and morphisms, all within the dependently-typed, proof-oriented paradigm of MathComp.
