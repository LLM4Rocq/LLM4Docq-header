
Finite Fields and Discrete Logarithms via Polynomial Quotients

Overview
========
This file formalizes the construction and properties of finite field extensions obtained as quotient rings of polynomial algebras modulo an irreducible polynomial, specifically in the setting of Coq and the Mathematical Components (MathComp) framework. It extends existing developments around the quotient algebra `R[X]/<p>` for a ring `R` and a polynomial `p`, focusing on the case where `p` is monic and irreducible so that the quotient becomes a field. Furthermore, it provides a formal treatment of discrete logarithms in such finite fields using primitive polynomials.

The main objectives of this file are:
- To demonstrate that for a monic and irreducible polynomial `p` over a (finite) field `F`, the quotient algebra `F[X]/<p>` is itself a field and carries an explicit field structure within MathComp’s hierarchical type classes.
- To define and characterize primitive polynomials, via which the quotient field admits a generator of the multiplicative group (primitive element), facilitating the construction of exponential and discrete logarithm functions.
- To formalize the discrete logarithm operation (and its computational properties) in these finite field extensions, including its behavior under multiplication and its well-definedness.

Mathematical Objects and Representations
=======================================
The file manipulates the following main mathematical concepts, each represented via concrete types or constructions in Coq:

1. **Polynomials over a Ring/Field (`{poly R}`)**
   - The Coq type `{poly R}` denotes polynomials with coefficients in `R`, which must be at least an integral domain.
   - Specialized properties (such as being monic or irreducible) are defined via predicates (e.g., `p \is monic`, `irreducibleb p`).

2. **Quotient Rings and Fields (`{poly %/ p}`)**
   - Given a ring or field `R` and a polynomial `p`, the quotient type `{poly %/ p}` represents the algebra of polynomials modulo the ideal generated by `p`. Arithmetic is performed modulo `p`.
   - When `p` is monic and irreducible, `{poly %/ p}` is not only a ring but, crucially, a field. This is captured via a dependent record: `monic_irreducible_poly p` is a type inhabiting a proof of both properties, and a special notation `{poly %/ p with mi}` is used throughout, where `mi` is such a proof.

3. **Finite Fields Extensions**
   - When `R` is a finite field `F` and `p` is monic irreducible of degree ≥ 2, `{poly %/ p with mi}` is a finite field extension of `F` of degree `deg p`. The cardinality of this extension is `#|F| ^ (deg p)`.
   - These fields are recognized by MathComp’s canonical structures (e.g., instances of `finFieldType`).

4. **Primitive Polynomials and Elements**
   - A primitive polynomial `p` is a monic irreducible polynomial such that a root of `p` mod `p` generates the multiplicative group of the field extension. This means every nonzero element of the extension is a power of `X mod p`.
   - The property is formalized as `primitive_poly p`, and related types and proofs ensure that the multiplicative group is cyclic, generated by the image of `X`.

5. **Discrete Logarithm Function (`qlogp`, `plogp`)**
   - The discrete logarithm in the field extension with respect to a primitive element is implemented as `qlogp`, which for an element `q` returns the unique exponent `i` with `q = (X mod p)^i`, modulo the field’s multiplicative order.
   - For polynomials `q` in `{poly F}`, `plogp p q` computes the discrete logarithm of the image of `q` mod `p`, when `p` is primitive.
   - These operations are equipped with their algebraic properties (boundedness, injectivity, additive relations).

6. **Splitting Fields**
   - The file briefly introduces constructions for splitting fields, recognizing `{poly %/ p}` extensions as splitting fields for appropriate polynomials.

Key Conventions and Coding Patterns
===================================
- **Dependent Typing for Algebraic Structure:** The quotient field `{poly %/ p}` is only instantiated as a field when accompanied by an explicit proof that `p` is monic and irreducible (`monic_irreducible_poly p`). The notation `{poly %/ p with mi}` is used to denote this dependent type, ensuring that algebraic operations are only available when mathematically justified.

- **Naming and Notational Conventions:**
  - Names prefixed with `qfpoly`, `qpoly`, or `qlogp` refer to objects or functions in the quotient field/modulo `p` context.
  - The single quote in notations like `'qX` denotes the canonical image of `X` in the quotient field `{poly %/ p}`.
  - Variables like `h`, `p`, `q`, and `F` stand for the modulus polynomial, elements thereof, and base finite field, respectively.

- **Instancing and Hierarchies:**
  - Mathematical Components’ "hierarchy builder" (HB) machinery is used to declare `{poly %/ p with mi}` as instances of standard algebraic structures (nz-ring, unit ring, field, vector space, finite types, etc.), propagating structure and automation.

- **Scope Management:**
  - The `ring_scope` is opened locally, so ring and field operations refer to the quotient field, respecting MathComp’s notation conventions.

- **Explicit Proofs in Context:**
  - Most definitions relying on irreducibility or primitivity require a proof argument, maintained explicitly to support type inference in complex developments.

- **Reflection and Boolean Propositions:**
  - Predicates such as being primitive (`primitive_poly p`), division (`p %| q`), and similar, are expressed as booleans or reflected via equivalence lemmas, supporting automation and rewriting.

- **Sectioning and Modularity:**
  - The file is structured in sections according to the algebraic context required:
    - General quotient construction over an integral domain (`DomainDef`, `iDomain`)
    - Field and finite field results (`Field`, `FinField`)
    - Homomorphisms and representations (`inPoly`, `finPoly`)
    - Splitting field constructions (`Splitting`)
    - Primitive element and logarithm theory (`PrimitivePoly`)
    - User-level interface for logs over polynomials (`Plogp`)
  - Duplication of some definitions (e.g., `qfpoly_const`) assists type inference due to Coq’s strictness in structure propagation.

Summary
=======
This file equips Coq and MathComp with the formal toolkit for finite field extensions constructed via quotients of polynomial rings, particularly emphasizing the structure and computation of discrete logarithms via primitive polynomials. It ensures that all constructions are hierarchy-aware, leverages dependent types for mathematical correctness, and adopts rigorous conventions for both notation and algebraic hierarchy. The file thus both extends the theoretical foundation for computational algebra in Coq and provides concrete tools for reasoning about field extensions, generators, and exponentiation in finite fields.
