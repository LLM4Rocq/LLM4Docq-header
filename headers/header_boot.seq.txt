
(** Sequences in Ssreflect

------------------------------------------------------------------------------
Purpose and Goal
----------------
This file provides a comprehensive formalization of **finite sequences** (also known as lists) as mathematical objects within the Ssreflect (Small Scale Reflection) and Mathematical Components (MathComp) libraries for Coq. The main objective is to augment the standard Coq list type with a large suite of tools for defining, manipulating, and reasoning about finite sequences in a modular, algebraic, and highly reusable way. The design places particular emphasis on “reflection”: Boolean predicates (computational tests) are systematically related to propositional assertions, supporting robust proof automation.

This file serves as the foundational sequence theory for all subsequent developments in MathComp, including algebra, combinatorics, and beyond.

------------------------------------------------------------------------------
Mathematical Objects and Their Representations
---------------------------------------------
- **Sequences (`seq T`)**: The type `seq T` is an alias for Coq’s built-in `list T`, representing finite sequences (ordered lists) of elements from type `T`.
  - The empty sequence is `[::]`.
  - Nonempty sequences are constructed via `x :: s` (“cons”), and the various notations make pattern matching and construction ergonomic.

- **Specializations**:
  - **Bit sequences (`bitseq`)**: Defined as `seq bool`, representing finite sequences of bits.

- **Sequence Operations**:
  - **Constructors**: Singleton, concatenation (`++`), right-cons (`rcons`), repeated elements (`nseq`), constructed list (`[:: x0; x1; ...; xn]`), and so on.
  - **Factories**: Create sequences by repeating values, via functions over indices (`mkseq`, `iota`).
  - **Access/Update**: Head (`head`), tail (`behead`), last, indexing with a default value (`nth`), lookup with error option (`onth`), update element (`set_nth`), increment element (`incr_nth`).
  - **Structural**: Map, filter, flatten, reverse, masking with bitseq, take and drop prefixes, rotations (`rot`, `rotr`).
  - **Combinatorial and Derived**: Uniqueness (`uniq`), constantness, all/every/exists predicates, count, find, permutations, subsequences, infix/prefix/suffix, zipping/unzipping, pairwise relations and allrel, allpairs (cartesian products).
  - **Shape and Reshaping**: For sequences of sequences, extract shapes (`shape`), flatten, reshape, with explicit relations between flattened and reshaped indices.

- **Reflected Predicates**: 
  - Many sequence predicates (e.g., `has`, `all`, `uniq`, `perm_eq`, `subseq`, `prefix`, `suffix`, etc.) are defined as Booleans but are systematically paired with reflection lemmas, bridging the computational (bool) and propositional interpretations.

- **Equality and Structures**: 
  - Sequences have an extensional equality (`eqseq`) when the element type is an `eqType`, enabling use of Coq’s typeclass and canonical structure mechanisms. The file develops `eqType` and `predType` instances for sequences.
  - Membership predicates: inclusion of `x` in a sequence through `\in` notation, supported by induction and reflection.

- **Combinatorial Principles**:
  - Rich set of induction and case analysis principles for sequences, including right-to-left (`last_ind`), double induction, and pivot patterns for reasoning about segmentation.

- **Permutation and Tally**:
  - Equivalence of sequences “up to permutation” (`perm_eq`), with formal properties (symmetry, transitivity, equivalence with the multiset of elements and counts).
  - Tools for counting multiplicities of elements in sequences (`tally`) and working with representations as bags or multisets.

- **Cartesian Constructions**:
  - Notations and operations for list comprehensions extended to dependent and non-dependent cartesian products (`allpairs_dep`, `allpairs`).

------------------------------------------------------------------------------
Key Conventions and Notation
----------------------------
- **Binding and Scoping**:
  - The custom scope `seq_scope` is defined for all sequence notations.
  - Most notations and definitions are set to be “prenex” or transparent for unfolding under quantifiers.

- **Implicit Arguments and Pattern Matching**:
  - Ssreflect-style implicit arguments are pervasive; pattern matching over `[:: x & s]` and similar constructs is common and enabled by notation.
  - “Destructuring” induction patterns and right-to-left traversal tools (e.g., `lastP`) support proofs by case analysis on sequence shape.

- **Boolean Reflection**:
  - Predicates are Boolean-valued, with companion “`P`” lemmas (e.g., `hasP`, `allP`, etc.) providing reflection to/from the corresponding logical property. This enables automation and succinct, robust proof scripts.

- **Default Values**:
  - When extracting elements by index (e.g., in `nth x0 s i`), a default value is required for out-of-bounds access. This avoids partiality but can sometimes be obfuscated by notation (e.g., `s`_i`).

- **Extensionality and Equality**:
  - Sequence equality is extensional (elementwise), not pointer-based. Many results are proven “from nth” or “from onth” pointwise characterizations.

- **Reuse of Mathematical Infrastructure**:
  - Repeated patterns from algebra (such as associativity, commutativity, cancellation) are abstracted wherever possible.
  - Standard results from finite set theory (e.g., permutation, count, uniqueness) are recast for sequences, leveraging their ordered nature when appropriate.

- **Notation for List Comprehension and Filtering**:
  - List comprehension-like notations allow succinct expression of filters, maps, cartesian products, etc., e.g., `[seq E | x <- s & C]`.

- **Automation and Canonical Structures**:
  - Canonical structures and hints are set to support seamless typeclass inference and proof search (e.g., auto resolution of `allss` for membership/superset predicates).

- **Naming Conventions**:
  - Main sequence functions mirror standard list names but often use shorter Ssreflect-inspired names (`cat` for `app`, `rev`, `rcons`, etc.).
  - “P” for reflection lemmas, “Pn” for the complement, “K” for cancellation, “E” for extension/reduction characterizations.

------------------------------------------------------------------------------
How to Use this Docstring
-------------------------
This docstring orients the reader to how **finite sequences** are formalized and manipulated in Ssreflect/MathComp. It details the core concepts, key abstractions and notational conventions, the role of Boolean reflection, and the major forms of induction and case analysis on sequences. Its coverage allows one to interpret or annotate any specific portion of the source file: for example, which mathematical idea a lemma encodes, what purpose a function serves, or how a particular reflected predicate is intended to be used in proofs. The docstring’s overview of the conventions, types, and notations provides all essential context to understand and comment on any code chunk within the file without needing to consult the source directly.

**Summary**: This file formalizes finite sequences, equipping them with a powerful algebraic and logical toolbox, and establishes notational and structural foundations for all subsequent combinatorial and algebraic proof development in MathComp.
*)
