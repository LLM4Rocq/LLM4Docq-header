
Paths and Sortedness for Sequences over EqTypes

Overview
========
This file formally develops the foundational theory of **paths**, **cycles**, and **sorting** for sequences whose elements belong to an arbitrary type with decidable equality (an _eqType_), within the Coq proof assistant. It systematically treats paths as sequences with an additional progression relation, and also addresses ordered (sorted) sequences, cycles, and their interaction with algorithms such as merge sort. The purpose is to provide a general, reusable abstract interface and a collection of lemmas and tools for manipulating paths, cycles, and sorted sequences, serving as a bridge between low-level sequence operations and higher-level mathematical structures such as graphs, permutations, and orders.

Mathematical Objects and Representations
========================================
The file centers around these main concepts:

1. **Paths (`path`)**:  
   - A path is a non-empty sequence `x :: p` of elements of some type `T`, together with a binary _step relation_ `e : T → T → bool`, and is "valid" if every consecutive pair in the sequence respects the relation `e`.
   - `path e x p` holds if `x :: p` forms an e-path: formally, for each index `i < size p`, `e (nth x0 (x::p) i) (nth x0 p i)` is true.
   - Representation: `(x : T)` (the head/start), `(p : seq T)` (the tail), `(e : rel T)` (a boolean binary relation).

2. **Cycles (`cycle`)**:  
   - A cycle is a sequence in which, after traversing in order, the step relation `e` also holds between the last and first element; cycles may be empty (unlike paths).
   - `cycle e c` holds if `c` is empty, or forms an e-path when traversed, wrapping around from (last) to (head).

3. **Sorted Sequences (`sorted`)**:  
   - A sequence is sorted with respect to a relation `e` if every adjacent pair is `e`-related; this is commonly used with `<=` or `<` for orderings.
   - `sorted e s` applies `e` across all adjacent pairs in `s`.

4. **Uniqueness and Simple Cycles**:  
   - `uniq s` expresses that the sequence has no duplicate elements.
   - `ucycle e c` (boolean predicate and proposition) asserts that `c` is both an `e`-cycle and unique (simple).

5. **Function Paths and Cycles (`fpath`, `fcycle`, `ufcycle`)**:  
   - _Function paths_ are paths where the step relation is defined by a function, so each step deterministically follows by function application.
   - Notations:  
     - `fpath f x p` is shorthand for paths where `e x y := f x = y`.
     - `fcycle f c` for cycles.
     - `ufcycle f` for simple cycles under function `f`.

6. **Trajectories (`traject`) and Looping**:  
   - The trajectory of length `n` for a function `f` and start value `x` is the sequence `[x; f x; f^2 x; ...; f^{n-1} x]`.
   - Looping describes if the trajectory at length `n` contains all iterates from earlier in the sequence, i.e., the orbit closes.

7. **Operations on Paths and Cycles**:  
   - **Next/Prev (`next`, `prev`)**: successor and predecessor elements in a cycle, returning the next or previous occurrence in the cycle (or itself, if not present).
   - **Arc (`arc`)**: the (possibly empty) subpath of a cycle between two nodes.
   - **Shorten (`shorten`)**: removes loops from a path, returning a subpath with the same endpoints and no repeated vertices.

8. **Relational Morphisms and Functoriality**:  
   - The file introduces `rel_base` and `fun_base` predicates, which describe how a function transforms one relation into another, possibly with some exceptions.
   - Functions such as `map_path`, `cycle_map`, and `sorted_map` describe the effect of mapping a function over paths and cycles.

9. **Segmenting and Splitting Paths**:  
   - Dependently-typed inductive principles (`splitP`, `splitPl`, `splitPr`) allow reasoning about paths split at a given internal point, facilitating structural induction and substitution along paths.

10. **Merges and Sorting**:  
    - **Merge**: merging two sorted sequences into a single sorted sequence (by a given order `e`).
    - **Sort**: stable merge-sort producing a sorted permutation of the original sequence; the algorithm is proved to be stable and size-preserving.
    - Lemmas describe interaction of merges and sorts with mapping, uniqueness, permutations, filters, masking, and subsequences.

Key Conventions and Notational Patterns
=======================================
- **Parameter Passing**:  
  Paths are passed as three objects—`head`, `tail`, and the path predicate—rather than as a bundled dependent record. Lemmas are structured to take these as separate arguments, capitalizing on Coq’s implicit arguments for type inference to keep notation light.

- **Boolean Predicates and Proof Reflection**:  
  Many properties (such as `path`, `cycle`, `sorted`) are boolean predicates, with reflection principles connecting them to their logical (Prop) versions, supporting smooth transitions between Booleans and logical statements.

- **Implicit Arguments and Notations**:  
  File-wide `Set Implicit Arguments` is used so type and relation parameters are generally inferred. Notations such as `path e x p`, `cycle e c`, `sorted e s`, and `fpath f x p` are consistently used. Specialized notation such as `mem2 s x y` is provided for key path properties (such as “y appears after x in p” in a non-strict sense).

- **Cat and Rotation Properties**:  
  Concatenation and rotation of sequences are supported, with corresponding lemmas about their effect on path and cycle properties, as well as uniqueness and sorting.

- **Ordering Conventions**:  
  The file uses the convention that the empty path is not a path between distinct nodes, but the empty cycle is a valid cycle. Uniqueness is not assumed by default for paths or cycles, must be asserted, and separate predicates are provided for simple (unique) cycles.

- **Sectioning and Naming**:  
  The code is structured into nested Coq `Section`s for fine-grained locality of assumptions (such as on the step relation `e`, the element type `T`, or auxiliary properties such as transitivity, totality, or monotonicity). Lemmas and definitions are named according to their mathematical content, with systematic suffixes: `..._path`, `..._cycle`, `..._sorted`, and so forth.

- **Equational and Inheritance Lemmas**:  
  Many lemmas state and relate equivalences between properties over sequences and their images under mappings, filters, or permutations, supporting compositional and functorial styles of proof and programming.

- **Sorting Stability and Morphisms**:  
  The merge-sort is proven stable under certain lexicographic conditions; sorting commutes with mapping via monotone or injective functions, and combinations with mask/filter operations are dealt with through existence (sigma) lemmas using bit-sequences (`bitseq`).

- **Arguments Declarations for Hints**:  
  Many lemmas have `Arguments` directives provided so that their use in proof automation and interactive tactics is convenient and their implicit arguments behave as expected.

Summary for Code Interpretation and Generation
=============================================
If you encounter a lemma, function, or notation in this file, it is manipulating (possibly under mapping or restriction) sequences with respect to a relation (typically, but not necessarily, an order or successor function), considering properties such as being a path, cycle, sorted, or unique. The file provides tools for:

- Proving and decomposing path/cycle/sorted structure;
- Reasoning about the effect of standard sequence operations (cat, rot, map, filter, take, drop, etc.) on those properties;
- Reasoning about functorial images or morphisms with respect to relations;
- Performing stable sorting under general relations, with formal connection to permutations and uniqueness;
- Relating the above under various hypotheses (transitivity, reflexivity, antisymmetry, monotonicity, etc.);
- Segmenting sequences at arbitrary points (for induction or splitting proofs);
- Handling function-based paths (dynamically generated sequences via iterates).

When interpreting or documenting code from this file, always consider:
- Is the sequence under consideration a generic sequence, a path, a cycle, or a sorted list?  
- What binary relation (`e`) or function (`f`) is structuring the sequence?
- Are we reasoning in terms of booleans (computable properties) or coercing to logical propositions?
- Is uniqueness required, or is it an additional property?
- How do standard sequence manipulations alter the property in question?
- How do the functorial or morphism properties (via mapping or relation transformations) interact with preservation or transformation of the sequence properties?

This context, conventions, and abstraction level makes the file a central piece for any formalization involving finite sequences with progression, order, or orbit structure, such as in graph theory, automata, list orderings, and combinatorics over finite types.
