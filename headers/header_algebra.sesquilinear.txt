
Sesquilinear Forms: Algebraic Structures and Orthogonality in Linear Algebra

Overview
========
This Coq source file provides a comprehensive formalization of sesquilinear forms, their key subclasses (bilinear, hermitian, symmetric, skew-symmetric, and dot products), and associated algebraic constructions within the context of vector spaces and linear algebra over (possibly non-commutative) rings and fields. Its main objective is to define, axiomatize, and study the algebraic, linear, and orthogonality properties of these forms, enabling rigorous formal proofs of structure theorems and computations such as orthogonal complements, isometries, and the Cauchy-Schwarz inequality.

This formal development leverages the capabilities of the Mathematical Components library (MathComp), using canonical structures, HB mixins, and powerful typeclass machinery to encode generalized notions of linearity, symmetry, and involution. The file is foundational for advanced developments in linear algebra, geometry, and the spectral theory of modules or matrices over rings and fields.

Mathematical Objects and Their Representation
============================================
The file manipulates and relates the following core mathematical structures:

1. **Rings and Fields**: The algebraic base is a type `R` equipped with ring or field structure, optionally enriched with additional properties such as involution or conjugation. These are encoded using MathComp's `nzRingType`, `fieldType`, `numClosedFieldType`, etc.

2. **Modules and Vector Spaces**: General left modules (`lmodType`) and vector spaces (`vectType`) over a ring or field `R` are employed to parameterize forms and their behaviors.

3. **Matrices and Row Vectors**: Rectangular and square matrices are represented by types like `'M[R]_n` (square matrices of size `n`) and row vectors by `'rV[R]_n`. Special matrices such as the identity and "delta" (standard basis) matrices are denoted (`1%:M`, `'e_i`).

4. **Involutive Morphisms**: The crucial algebraic involution (`theta : R -> R`)—for instance, conjugation on the complex numbers or the identity—are captured as structures of type `involutive_rmorphism R`.

5. **Sesquilinear Forms**: Central to the file, a sesquilinear form is a function `f : U -> U' -> V` that is linear in one argument and "semilinear" (i.e., linear up to an involution) in the other. These are encoded by `{bilinear U -> U' -> V | s & s'}` for suitable scaling laws `s` and `s'`.

    - **Bilinear Forms**: The special case where both scaling laws correspond to ordinary scalar multiplication; these have additional factory and builder mechanisms for instantiation.

    - **Hermitian (and Related) Forms**: A `hermitian` form is a sesquilinear form satisfying an adjoint symmetry: 
      `f x y = (-1)^eps * theta (f y x)`, parametrized by a boolean `eps` (where `false` encodes hermitian/symmetric and `true` encodes skew-hermitian/skew-symmetric), and by the involution `theta`. Various type notations designate symmetric, skew-symmetric, and Hermitian forms, as well as positive-definite "dot products".

    - **Dot Products**: Forms that are positive-definite are packaged as `{dot U for theta}`, where non-degeneracy is enforced.

6. **Form-Matrix Correspondence**: Functions from a matrix and a conjugation to a sesquilinear form (`form theta M u v`), and vice versa (`matrix_of_form form`), are provided, enabling seamless transition between algebraic and matrix representations.

7. **Orthogonality and Orthogonal Complements**: The notions of orthogonality for vectors, subspaces, and sets of vectors ("pairwise orthogonal", "orthonormal") are mechanized. Key constructions include:
    - The *orthogonal complement* of a matrix or subspace (functions `orthomx`, `orthov`).
    - Definitions of when two elements, sequences, or subspaces are orthogonal, and the related predicates and reflection lemmas.

8. **Isometries**: Linear maps that preserve a given sesquilinear or hermitian form, including their restrictions, extensions, and criteria for injectivity or surjectivity.

9. **Canonical Notions and Specialized Forms**: The file introduces canonical types for symmetric, skew-symmetric, and Hermitian matrices, and defines various properties such as non-degeneracy, symplectic, orthogonal, and unitary forms in type-theoretic terms.

Key Notational and Coding Conventions
=====================================
- **Named Scopes & Notations**: The file creates and maintains a `sesquilinear_scope` dedicated to form/matrix notations, facilitating clear syntactic distinction. Essential notations include:
    - `"M ^ phi"` and `"M ^t phi"`: Apply the morphism `phi` pointwise and after transpose, respectively.
    - `"''e_' j"`: The standard row unit vector in position `j`.
    - `"''[u,v]"`: The value of a form (often from a matrix) applied to `u` and `v`.
    - `"B ^_|_"`: The orthogonal complement (matrix or vector).
    - `"A '_|_ B"`: Orthogonality relation between subspaces or matrices.
    - `"eps_theta .-sesqui"`: The set of sesquilinear forms (or matrices) of a specified symmetry.

- **Typeclasses and Mixins**: The file uses HB (Hierarchical Builders) mixins and structures (e.g., `isInvolutive`, `isBilinear`, `isHermitianSesquilinear`, `isDotProduct`) to encode algebraic properties and automatically provide appropriate structure inference for functions, forms, and morphisms.

- **Linear and Scalable Laws**: Linearity and scaling properties are encapsulated via `GRing.Scale.law` and typeclass constraints, so that bilinearity and sesquilinearity are established both structurally and propositionally.

- **Reflection and Boolean Predicates**: Many key orthogonality and form-symmetry relations are coupled with reflection lemmas, such that Boolean predicates (`A '_|_ B`, `M \is ...`) correspond to mathematical propositions. This allows smooth case analysis in proofs.

- **Naming and Suffixes**: 
    - Suffixes like `E` (for equational characterizations), `P` (for reflection), `K` (for involutivity/projection), and `D`/`B` (for additive/multiplicative behavior) are used throughout for lemmas.
    - Nondegenerate, symmetric, orthogonal, etc., properties are usually named as `is_property` (e.g., `is_skew`, `is_unitary`).

- **Explicit Quantification & Coercions**: Arguments to functions and forms are made explicit, often using localized notations for better readability. Coercions are set up to allow seamless use of forms as functions.

- **Locality**: Many definitions and notations are declared locally (inside sections) for encapsulation. Some notations are declared as "reserved", to be opened only where relevant.

Structure and Thematic Organization
====================================
The file is organized into a sequence of logical sections, generally following this pattern:
1. **Typeclass infrastructure and basic definitions**: Involutions, bilinear and sesquilinear forms, builders and factories.
2. **Algebraic and linear properties**: Lemmas about additivity, scaling, and symmetry for forms and their matrix representations.
3. **Core structures and morphisms**: Hermitian and dot products, with associated matrix and form equivalence.
4. **Orthogonality and orthogonal complements**: Key results about orthogonal sets, pairwise and full orthogonality, and explicit computations of orthogonal complements.
5. **Isometries and invariance**: Extension and lifting of isometries, as well as uniqueness properties.
6. **Canonical subtypes and special forms**: Symmetric, skew-symmetric, and Hermitian matrices, with equational and reflection principles.
7. **Metric and norm-related theorems**: Cauchy-Schwarz, positive definiteness, triangle inequality, and structure theorems for orthonormal sets and bases.

Applications and Scope
======================
With these abstractions, the file enables:
- The explicit computation and deduction of orthogonal and orthonormal bases.
- Translation between matrix and abstract form perspectives.
- Algebraic manipulation of forms under morphisms (e.g., involution, conjugation).
- Reasoning about subspace dimensions in connection with orthogonality.
- Foundation for further geometry, spectral theory, and advanced structure theorems (e.g., isometry groups, classification of forms).

Assumptions and Limitations
===========================
- The file works in a highly generic context—rings need not be commutative unless specified, and forms can be sesquilinear for arbitrary involutions.
- The file is meant to be context-agnostic and prepares the ground for concrete developments (e.g., Euclidean, complex Hermitian, or skew-symmetric geometry).
- It assumes basic familiarity with Coq, MathComp, and their algebraic hierarchy, but the abstractions (e.g., involutions, forms, mixins) are self-contained.

Conclusion
==========
This module is a cornerstone for reasoning formally about bilinear, sesquilinear, and Hermitian forms in Coq/MathComp. It frames the definition, algebra, and linear algebraic consequences of such forms, establishing the technical infrastructure required for further work in linear geometry, spectral analysis, and classical group theory within a formally verified mathematics ecosystem.
