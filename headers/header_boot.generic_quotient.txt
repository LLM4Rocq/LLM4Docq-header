
(** Quotient Types in Coq: General Interface, Constructions, and Morphisms

Overview
========

This file provides a comprehensive and generic framework for *quotient types* in the Coq proof assistant, independent of the full Mathematical Components (MathComp) algebraic hierarchy but harmonizing naturally with its style. The file aims to formalize how to define, manipulate, and reason about types obtained as quotients of a base type by an explicitly given equivalence relation, in a way that is both abstract and practical for formal mathematics.

**Main Purpose:**  
- To introduce an interface encapsulating quotient types, including canonical surjection (projection) and representative functions.
- To offer mechanisms for constructing quotients of a type `T` by a decidable equivalence relation, especially when `T` has choice, count, or finite type structure.
- To provide convenient notations, morphism-lifting tools, and interfaces ensuring compatibility of standard MathComp structures (`eqType`, `choiceType`, etc.) on quotients.

Mathematical Objects and Formalization
======================================

1. **Quotient Types (`quotType`):**  
   - *Concept:* Given a type `T` and an equivalence relation `e` on `T`, the quotient type partitions `T` into equivalence classes; the quotient type is essentially the set of these classes.
   - *In Coq:* Formalized as a type `Q` packaged with two main functions:
       - A **projection** (surjection) `\pi : T -> Q` mapping each element to its class.
       - A **representative** function `repr : Q -> T` picking a canonical representative for each class.
   - *Interface:* Encapsulated via the `Quotient` hierarchy builder, with cancellation conditions ensuring that `repr` and `\pi` compose correctly: `\pi (repr q) = q`.

2. **Equivalence Relations (`equiv_rel`):**  
   - Encapsulated as records ensuring reflexivity, symmetry, and transitivity of a binary relation on `T`.
   - Serves as the foundation for quotient constructions.

3. **Concrete Quotient Construction (`{eq_quot e}`):**  
   - For a given equivalence relation `e : rel T` (with some structure on `T`: e.g., `choiceType`), the file describes how to build the actual quotient type, equipping it with standard MathComp structures (`eqType`, `choiceType`, potentially `finType`, etc.) and appropriate projections and representatives.

4. **Morphisms and Lifting:**  
   - Tools for *lifting* functions, predicates, and constants from the base type to the quotient type—preserving compatibility with the quotient structure. This includes:
       - **Morphisms:** Functions respecting the relation induced by the quotient, with notations for unary (`PiMorph1`), binary (`PiMorph2`), monotone, and more general morphisms.
       - **Lifting helpers:** Uniform ways to define lifted operations (`lift_op1`, `lift_op2`, etc.) using the `repr` and `\pi` functions.
   - These allow, e.g., defining operations on polynomials over quotient rings directly from their representatives.

5. **Equality and EqQuotient Types (`eqQuotType`):**  
   - An additional interface for quotient types where the equivalence relation is *decidable* (i.e., Boolean-valued).
   - Allows the quotient type itself to inherit the structure of an `eqType` (with Boolean equality), enabling use of reflexive tactics and pattern matching on equality.

6. **Subtype Conversions:**  
   - Provides mechanisms (via the `QuotSubType` module) to endow quotient types with various instances (subtype, choice, countable, finite) if the base type supports them.
   - Notations for copying and applying MathComp structures to quotients.

Key Conventions and Notations
=============================

- **Notation and Scopes:**  
  - The keyword `quotient_scope` is used to delimit all notations related to quotient types (e.g., `\pi`, `[mod Q]`).
  - Standard notations:
      - `\pi_Q x` : class of `x` in quotient type `Q`
      - `repr q` : canonical representative of class `q`
      - `x == y %[mod Q]` : equality modulo the quotient (i.e., `\pi_Q x == \pi_Q y`)
      - More generally, `[mod_eq e]` denotes equality modulo an equivalence relation `e`.
  - Fancy notations for lifting (e.g., `{pi a}` for elements equal to a projection) and operation lifting.

- **Interface Hierarchy:**
  - The quotType and eqQuotType interfaces are established via the HB (Hierarchy Builder) system and are extensible to new types as needed.

- **Morphisms and Lifting:**  
  - Functions and predicates can be declared as “morphism” or “lifting” if they commute with the projections (`\pi`) in an appropriate way. This enables consistent transport of structure from the base type to the quotient.
  - Notations are supplied to succinctly declare and use such lifted or compatible functions.

- **Choice and Encodings:**  
  - The quotient construction is sensitive to the presence of constructive choice on the base type, and alternate encodings (via an "encoded equivalence") are provided for types lacking a direct `choiceType` structure, by encoding into a type that admits it.

- **Canonical Structures:**  
  - When possible and compatible, quotients inherit canonical instances of standard MathComp structures (`eqType`, `choiceType`, `countType`, `finType`) through subtype wrappers and copying.

- **Reflection and Lemmas:**
  - Lemmas connecting quotient equality (`x = y %[mod Q]`) and the underlying equivalence relation are systematically provided, often as Boolean equivalences (`reflect`) for compatibility with Ssreflect/MathComp proof automation.

Contextual Usage and Interpretation Strategy
============================================

- This file forms the *foundational interface and theory* for quotient types in MathComp-style formalization, abstracting the construction of quotients from the details of their underlying type and equivalence relation.

- When encountering a declaration, lemma, or notation in this context, interpret:
    - *Types of the form* `quotType T` or `{eq_quot e}` as formalizations of sets of equivalence classes of `T` modulo `e`.
    - *Operations involving* `\pi`, `repr`, and notations like `x == y %[mod Q]` as computations or tests within the quotient type, mapping back and forth with canonical representatives.
    - *Morphism or lifting declarations* as rules ensuring the commutativity of constructed operations with the quotient structures, enabling structure and properties to be preserved on the quotient.

- In generating documentation or comments for a code chunk from this file, describe how it contributes to either:
    - The definition or properties of the quotient interface,
    - The construction and properties of the canonical surjection and representatives,
    - The lifting of functions, predicates, or constants through the quotient,
    - The construction and manipulation of subtypes and canonically inherited structures,
    - The explicit construction of quotients via equivalence relations and encodings,
    - Or the logical connection between Boolean/reflective equality on quotients and the base equivalence relation.

Self-Sufficiency
================

No prior knowledge of MathComp or its hierarchy is necessary to understand this framework; the design is meant to be modular, abstract, and extensible. The notations and conventions are mirrored after standard mathematical practice for quotients but made explicit and machine-checkable through interface records, canonical projections/representatives, and systematic lifting of structure.

**In summary:**  
This file equips the Coq formalizer with an abstract, extensible, and practical toolbox for constructing and exploiting quotient types, enabling both low-level formal manipulations and high-level mathematical modeling—particularly for algebraic structures, but with sufficient generality for broader settings.
