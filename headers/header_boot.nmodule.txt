
Additive Group-Like Structures in Algebraic Hierarchies

Overview
========
This module establishes an extensible and canonical hierarchy of additive algebraic structures in Coq, ranging from the minimal "additive magma" (a set with a binary addition operation) up to additive abelian groups (Z-modules), together with supporting infrastructures for morphisms, substructures, and closure/stability predicates. The file is part of a larger algebraic formalization effort and is designed to be orthogonal to the multiplicative hierarchy, providing additive analogues for canonical mathematical concepts.

Purpose and Goals
-----------------
The primary objective of this file is to define, organize, and connect a spectrum of additive algebraic structures in a way that is:
- Canonical: Each structure is represented as a first-class Coq type equipped with canonical mixins and instances for algebraic operations.
- Modular and Extensible: New structures, morphisms, or subtypes can be introduced with minimal friction, using Hierarchy Builder (HB) facilities (a MathComp extension).
- Unifying: The design ensures compatibility with the rest of the MathComp ecosystem and connects seamlessly with structures such as choice types, finite types, and big operators.

This module also develops a robust theory of additive structure-preserving morphisms (additive, semi-additive, Z-module morphisms), closure properties for substructures, and natural operations on function spaces and products.

Mathematical Structures and Representations
===========================================

1. **Additive Magma and Variants**
   - **baseAddMagmaType:** A type with a binary addition operation (no further axioms). Encapsulated via a `hasAdd` mixin: `add : V → V → V`.
   - **addMagmaType:** An additive magma where addition is commutative (`addrC`).
   - **addSemigroupType:** Additive magma with commutative and associative addition (`addrA`).
   - **baseAddUMagmaType:** An additive magma with a distinguished zero element (`zero : V`).
   - **addUMagmaType:** Same as base AddUMagma, with commutative addition and zero.
   - **nmodType (Nmodule):** An additive monoid; i.e., a commutative, associative addition and a zero element.
   - **baseZmodType:** A pointed additive magma with an opposite operation (`opp : V → V`).
   - **zmodType (Zmodule):** An abelian (additive) group: commutative, associative addition, identity (zero), inverses.

2. **Substructures**
   For each structure above, corresponding subtypes are defined via predicates (as subset types, or "subTypes" in MathComp), provided the predicate is closed under the structure's operations. Substructures include, for example, `subBaseAddUMagma`, `subAddUMagma`, `subNmodType`, `subZmodType`, all enforcing closure of the value map with respect to the relevant operations.

3. **Structure-Preserving Morphisms**
   - **Additive Morphism `{additive U -> V}`:** A function `f : U → V` between additive structures (usually Nmodules or Zmodules) preserving addition and zero: `f(0)=0` and `f(x+y)=f(x)+f(y)`.
   - **Z-module Morphism:** A function between Zmodules that, equivalently, preserves subtraction or opposites.
   - Morphisms are formalized both as mixin records for proof obligations and as concrete types, registered in the HB hierarchy.

4. **Closure and Stability Predicates**
   - **addr_closed, addumagma_closed, oppr_closed, subr_closed, zmod_closed:** Predicates expressing that a given subset is stable (i.e., closed) under the corresponding operation(s): addition, zero, opposites, subtraction, etc.
   - **Special structures** (e.g., `AddClosed`, `OppClosed`, `ZmodClosed`) encapsulate sets with these properties, facilitating the formalization of subgroups, submonoids, etc.

5. **Function Spaces and Products**
   The file registers additive structures on:
   - Function types (`U → V`), pointwise for all operations.
   - Finite function types (`{ffun aT -> rT}`), supporting, e.g., pointwise addition of finite-support functions.
   - Product types (`U × V`), by componentwise operations.
   Additive analogues of the big operator notations for sums are provided.

6. **Special Instances**
   - The type `bool` is given a Zmodule structure (with xor as addition).
   - `nat` is equipped with an Nmodule structure (usual Peano addition and zero).

Key Coding and Notational Conventions
=====================================

- **Scopes and Notations:** Most key notations reside in `ring_scope` (opened by default locally) and include infix "+" for addition, "-" for opposite/subtraction, "0" for identity, "*+ n" for repeated addition, and "\sum_" for sums. For functions, pointwise operations use notations like `f \+ g`, `\- f`, and `\0` for zero functions.
- **Operator Suffixes:** The file uses naming conventions (`0`, `D`, `B`, `Mn`, `N`, etc.) in lemma and definition names to signal association with operations (e.g., suffixed `D` for distributivity over +, `N` for opposite).
- **Implicit Arguments:** Most structures and lemmas use Coq's implicit argument mechanism for readability and composability.
- **Hierarchy Builder (HB):** All structures and morphisms use the HB system, which manages mixins, factories, and canonical instances, facilitating interoperability and automation.
- **Canonical Structures:** Structures are exported with dedicated modules (`Exports`), supporting Coq's canonical instance resolution.
- **Morphisms:** The `{additive U -> V}` interface represents morphisms, and mixins/instances for function and product spaces ensure that morphisms compose and that function spaces inherit the structure appropriately.
- **Closure Substructures:** Structures for closed subtypes mirror the ambient hierarchy, ensuring closure under inherited operations and morphisms.

Reading and Decomposing Code Chunks
===================================
Each section of the code—whether defining a structure, a morphism, or a closure predicate—reflects the mathematical object or property described herein. The HB records and factories encapsulate algebraic axioms; the function and product-section code shows how canonical structures are transferred; morphism modules track how structure-preserving maps are defined and composed. Notational conventions and scope management ensure formulae look mathematically natural in Coq. When interpreting or documenting a fragment, identify the algebraic level (e.g. monoid, group), the operations added at that level, and, if applicable, the morphism or closure structure being defined.

Summary Table of Key Structures
------------------------------
| Structure                   | Notation / Typeclass            | Mathematical Concept             |
|-----------------------------|----------------------------------|----------------------------------|
| baseAddMagmaType            | `hasAdd`, `BaseAddMagma`         | Set with addition                |
| addMagmaType                | `AddMagma`                       | Commutative additive magma        |
| addSemigroupType            | `AddSemigroup`                   | Commutative, associative addition|
| baseAddUMagmaType           | `hasZero`, `BaseAddUMagma`       | Addition + zero                  |
| addUMagmaType               | `AddUMagma`                      | Add. monoid (zero, commutative)  |
| nmodType (Nmodule)          | `Nmodule`                        | Commutative monoid (Nat-module)  |
| baseZmodType                | `hasOpp`, `BaseZmodule`          | Addition, zero, opposites        |
| zmodType (Zmodule)          | `Zmodule`                        | Abelian group                    |
| {additive U -> V}           | `Additive`                       | Additive (Zmod or Nmod) morphism |

Closing Notes
=============
This file is a foundational component in a modular hierarchy of algebraic objects with addition. It enables the formal development of additive abelian structures, their morphisms, closure properties, and subtypes in a way that maximizes codebase reuse, notational clarity, and extensibility within the Coq proof assistant. All core mathematical and notational conventions are made explicit and enforced via Hierarchy Builder's mechanism, ensuring a consistent and discoverable API.
