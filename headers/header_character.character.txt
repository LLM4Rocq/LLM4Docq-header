
(******************************************************************************)
* Character Theory: Irreducible Characters and Their Classification
*******************************************************************************
Purpose and Main Goals
======================
This file develops the foundational formalization of the character theory of finite groups. Its main goal is to define the algebraic and combinatorial structures underpinning irreducible complex characters (and their representations), implement key theorems of character theory, and provide a rich toolkit for manipulating characters, class functions, and associated invariants. The development closely follows classical sources such as Isaacs' textbook, and is designed to be the backbone for further study and computer-verification of finite group representation theory. 

The file supplies definitions, operations, and numerous theorems for:
  - Irreducible characters and explicit parametrization/indexing of their set
  - Character tables and relationships to group conjugacy classes
  - Kernel, center, restriction, induction and transfer maps on characters
  - Orthogonality relations and their consequences
  - Classification and properties of linear and special types of characters
  - The interplay of group-theoretic constructions (products, quotients, etc.) with their reflection on character theory
  - Determinant (central) characters and determinantal order

This formalization enables not only mechanical proof checking but also effective computation and further extension to advanced representation theory.

Mathematical Objects and Their Representations in Coq
=====================================================

1. **Groups and Representations**
    - The theory operates over a finite group `G` of type `{group gT}` (for some finite group type `gT`), with complex or algebraically closed field of coefficients `algC`.
    - Matrix representations are functions `rG : G -> 'M[R]_n` (matrices over a field `R`) that satisfy the axioms of group homomorphisms (modulo matrices).
    - The core record type for a representation is `representation`, which couples a natural number dimension and a representation function.

2. **Characters and Class Functions**
    - The vector space of class functions on `G` is denoted `'CF(G)`, usually consisting of functions `G -> algC` that are constant on conjugacy classes.
    - The special class of *characters* are those class functions that arise as traces of matrix representations and have extra integrality (integral-multiplicity) properties.
    - `cfRepr rG` gives the character afforded by the representation `rG`.
    - Linear characters (homomorphisms from `G` to the multiplicative group of units in `algC`) are identified via predicates like `lin_char` or `linear_char`.

3. **Irreducible Characters**
    - The set (tuple) of irreducible characters of `G` is denoted `irr G`, represented as a tuple indexed by `Iirr G`, where `Iirr G` is a finite index type of size `Nirr G`, which is the number of conjugacy classes of `G` (by the fundamental theorem).
    - The `i`-th irreducible character is written as `'chi_i` (or `'chi[G]_i` for groups other than the default).
    - The principal (trivial) character is always `'chi_0 = 1`.

4. **Wedderburn Components and Socles**
    - Socle types and the Wedderburn decompositions are captured by associating each irreducible character with a unique simple (indecomposable) module or matrix representation, via notations like `socle_of_Iirr i` and the representation `irr_repr (socle_of_Iirr i)`.

5. **Character Table and Conjugacy Classes**
    - The character table is realized as a matrix mapping pairs of irreducible character indices and conjugacy class representatives to the character values: `character_table G` is a square matrix of size `Nirr G`.
    - The set of conjugacy classes and their interaction with irreducible characters are tightly linked through indexing conventions `irr_class i` (i-th class) and `class_Iirr xG` (index of class containing `xG`).

6. **Operations on Characters**
    - *Induction* (`Ind_Iirr`), *restriction* (`Res_Iirr`), *morphism/image* (`morph_Iirr`), *quotients* (`quo_Iirr`), and *modifications or inflations* (`mod_Iirr`) are all provided, along with "transported" or functorial character operations such as conjugation, Galois automorphism, etc.
    - Tensor products, direct products, and semi-direct products of representations, and the corresponding induced transfer at the level of characters, are all implemented.
    - Determinant representation and the associated character (`detRepr`, `cfDet`) encode how the group acts via the determinant on the representation.

7. **Key Structures and Predicates**
    - The predicate `character` classifies class functions that are Chi-integral (sum of irreducibles with non-negative integer multiplicities).
    - The predicate `linear_char` classifies nontrivial one-dimensional representations.
    - `irr_constt phi` is the set of indices of irreducible characters appearing with nonzero coefficient in a given class function phi.
    - The kernel `cfker phi` and "center" `cfcenter phi` (group elements where absolute value of phi equals its degree) generalize these invariants.
    - Orthogonality relations and inner products (`cfdot`) between characters are realized as coordinate functionals.

8. **Invariants**
    - The determinantal order `''o(phi)` of a character phi is the order of the linear character afforded by its determinant.
    - Quantities such as degrees `'chi_i 1%g` (value of character on identity), kernels, images, and conjugacy class sizes are provided for character-theoretic computations.

Key Notational and Coding Conventions
=====================================

- **Notation**:
    - `'chi_i` denotes the i-th irreducible character; `'Chi_i` the associated irreducible representation.
    - `'CF(G)` signifies the class functions of `G`.
    - `'chi[G]_i` is the i-th irreducible character of the group `G`.
    - Structural and group-theoretic notations from MathComp and Ssreflect are used throughout (`'I_`, `{group gT}`, etc.).
    - Many arguments are implicit for brevity, especially in expressions involving classes, representations, or characters.
    - Short "matrix algebra" notations like `*m` for matrix multiplication, `\tr` for trace, and notations for block matrices are used.

- **Indexing, Enumeration, and Injection**:
    - Indexed types such as `Iirr G` (for irreducibles) and their relation to conjugacy classes (classes G) via `irr_class`, `class_Iirr`, and ensembles (`tuple`) are central.
    - Special attention is paid to the bijection between indices of irreducibles and indices of conjugacy classes, to enable unambiguous reference to entries in the character table.
    - Bijections between various parametrizing sets (`socle_of_Iirr`, `irr_of_socle`) are explicitly constructed and inversion properties are proved/refined.
    - Care is taken for base cases with the trivial group, and coercions or locking mechanisms are sometimes used to ensure canonicity or stability of notations.

- **Sectioning and Local Scopes**:
    - The file is split into many sections, each focused on a mathematical concept or operation, with variables and notation being localized. This allows for tight management of scope and context in proofs and definitions.
    - Local notations are used liberally to keep code readable, but each section stands alone for clarity.

- **Canonically Closed Sets and Morphisms**:
    - Canonical structures and HB (Hierarchy Builder) instances are used to characterize closure properties (`isAddClosed`, `isMulClosed`, etc.) of the set of characters under addition and multiplication, and for the behavioral properties under group homomorphisms.

- **Reflection and Boolean Predicates**:
    - Many mathematical predicates are reflected into Boolean-valued predicates with corresponding `reflect` lemmas, fitting the Ssreflect/MachComp style of Boolean small-scale reasoning.
    - For instance, irreducibility, being a character, or being a linear character have both predicate and Boolean versions.

- **Functoriality and "Transported" Operations**:
    - Induced (`Ind`), restricted (`Res`), inflated, deflated, and twisted characters are exhibited through functorial constructions, which mirror standard manipulations in the representation theory literature.
    - Operations like automorphism, conjugation, field automorphism (`cfAut u`), and their effect on the set and positions of irreducible characters are interpreted through index-shifting functions (like `aut_Iirr` and `conjC_Iirr`).

- **Proof Automation and Importing**:
    - The code heavily leverages MathComp's bigop, matrix, and group libraries for manipulation of sums, subsets, and group-theoretic properties.
    - Import and local open scopes (`ring_scope`, `group_ring_scope`, etc.) are systematically used to overload standard mathematical operators to their specialized mathematical meanings.

Context for Retrieval and Commentary Generation
==============================================
Persons (or LLMs) reading this docstring should understand that each definition, lemma, or proof in the file is set in the precise context of finite group character theory, as formalized here. The mathematical objects named and notatied (like `irr G`, `character`, `cfker`, etc.) refer to the structures described above. Notational conventions and sectioning patterns are critical for reading and producing precise, context-adapted docstrings or comments for code chunks extracted from this file.

Sections generally start by parameterizing over a finite group `G`, possibly extra subgroups or morphisms, and then define the relevant representations, constructions, or theorems. Most definitions come with canonical notation, relationships to other objects (e.g., "the index of `cfMorph` in the irreducible enumeration"), and the basic properties and functorialities expected by the theory.

The file's conventions are aligned with mathematical literature and standard textbooks, yet carefully adapted to the requirements of machine-checked proof, using tuples, indices, and explicit enumerations as needed for effective computation and verification.

(******************************************************************************)
